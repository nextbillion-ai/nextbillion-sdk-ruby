module NextbillionSDK
  module Models
    module Multigeocode
      type place_update_params =
        {
          key: String,
          data_source: NextbillionSDK::Multigeocode::PlaceUpdateParams::DataSource,
          place: ::Array[NextbillionSDK::Multigeocode::PlaceItem],
          score: Integer
        }
        & NextbillionSDK::Internal::Type::request_parameters

      class PlaceUpdateParams < NextbillionSDK::Internal::Type::BaseModel
        extend NextbillionSDK::Internal::Type::RequestParameters::Converter
        include NextbillionSDK::Internal::Type::RequestParameters

        attr_accessor key: String

        attr_reader data_source: NextbillionSDK::Multigeocode::PlaceUpdateParams::DataSource?

        def data_source=: (
          NextbillionSDK::Multigeocode::PlaceUpdateParams::DataSource
        ) -> NextbillionSDK::Multigeocode::PlaceUpdateParams::DataSource

        attr_reader place: ::Array[NextbillionSDK::Multigeocode::PlaceItem]?

        def place=: (
          ::Array[NextbillionSDK::Multigeocode::PlaceItem]
        ) -> ::Array[NextbillionSDK::Multigeocode::PlaceItem]

        attr_reader score: Integer?

        def score=: (Integer) -> Integer

        def initialize: (
          key: String,
          ?data_source: NextbillionSDK::Multigeocode::PlaceUpdateParams::DataSource,
          ?place: ::Array[NextbillionSDK::Multigeocode::PlaceItem],
          ?score: Integer,
          ?request_options: NextbillionSDK::request_opts
        ) -> void

        def to_hash: -> {
          key: String,
          data_source: NextbillionSDK::Multigeocode::PlaceUpdateParams::DataSource,
          place: ::Array[NextbillionSDK::Multigeocode::PlaceItem],
          score: Integer,
          request_options: NextbillionSDK::RequestOptions
        }

        type data_source =
          {
            ref_id: String,
            source: String,
            status: NextbillionSDK::Models::Multigeocode::PlaceUpdateParams::DataSource::status
          }

        class DataSource < NextbillionSDK::Internal::Type::BaseModel
          attr_reader ref_id: String?

          def ref_id=: (String) -> String

          attr_reader source: String?

          def source=: (String) -> String

          attr_reader status: NextbillionSDK::Models::Multigeocode::PlaceUpdateParams::DataSource::status?

          def status=: (
            NextbillionSDK::Models::Multigeocode::PlaceUpdateParams::DataSource::status
          ) -> NextbillionSDK::Models::Multigeocode::PlaceUpdateParams::DataSource::status

          def initialize: (
            ?ref_id: String,
            ?source: String,
            ?status: NextbillionSDK::Models::Multigeocode::PlaceUpdateParams::DataSource::status
          ) -> void

          def to_hash: -> {
            ref_id: String,
            source: String,
            status: NextbillionSDK::Models::Multigeocode::PlaceUpdateParams::DataSource::status
          }

          type status = :enable | :disable

          module Status
            extend NextbillionSDK::Internal::Type::Enum

            ENABLE: :enable
            DISABLE: :disable

            def self?.values: -> ::Array[NextbillionSDK::Models::Multigeocode::PlaceUpdateParams::DataSource::status]
          end
        end
      end
    end
  end
end
