module NextbillionSDK
  module Models
    module Skynet
      module Asset
        type location_list_response =
          {
            data: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data,
            message: String,
            status: String
          }

        class LocationListResponse < NextbillionSDK::Internal::Type::BaseModel
          attr_reader data: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data?

          def data=: (
            NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data
          ) -> NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data

          attr_reader message: String?

          def message=: (String) -> String

          attr_reader status: String?

          def status=: (String) -> String

          def initialize: (
            ?data: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data,
            ?message: String,
            ?status: String
          ) -> void

          def to_hash: -> {
            data: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data,
            message: String,
            status: String
          }

          type data =
            {
              distance: Float,
              geojson: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson,
              geometry: ::Array[String],
              list: ::Array[NextbillionSDK::Skynet::Asset::TrackLocation],
              page: NextbillionSDK::Skynet::Pagination,
              snapped_points: ::Array[NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint]
            }

          class Data < NextbillionSDK::Internal::Type::BaseModel
            attr_reader distance: Float?

            def distance=: (Float) -> Float

            attr_reader geojson: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson?

            def geojson=: (
              NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson
            ) -> NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson

            attr_reader geometry: ::Array[String]?

            def geometry=: (::Array[String]) -> ::Array[String]

            attr_reader list: ::Array[NextbillionSDK::Skynet::Asset::TrackLocation]?

            def list=: (
              ::Array[NextbillionSDK::Skynet::Asset::TrackLocation]
            ) -> ::Array[NextbillionSDK::Skynet::Asset::TrackLocation]

            attr_reader page: NextbillionSDK::Skynet::Pagination?

            def page=: (
              NextbillionSDK::Skynet::Pagination
            ) -> NextbillionSDK::Skynet::Pagination

            attr_reader snapped_points: ::Array[NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint]?

            def snapped_points=: (
              ::Array[NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint]
            ) -> ::Array[NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint]

            def initialize: (
              ?distance: Float,
              ?geojson: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson,
              ?geometry: ::Array[String],
              ?list: ::Array[NextbillionSDK::Skynet::Asset::TrackLocation],
              ?page: NextbillionSDK::Skynet::Pagination,
              ?snapped_points: ::Array[NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint]
            ) -> void

            def to_hash: -> {
              distance: Float,
              geojson: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson,
              geometry: ::Array[String],
              list: ::Array[NextbillionSDK::Skynet::Asset::TrackLocation],
              page: NextbillionSDK::Skynet::Pagination,
              snapped_points: ::Array[NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint]
            }

            type geojson =
              {
                geometry: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson::Geometry,
                type: String
              }

            class Geojson < NextbillionSDK::Internal::Type::BaseModel
              attr_reader geometry: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson::Geometry?

              def geometry=: (
                NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson::Geometry
              ) -> NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson::Geometry

              attr_reader type: String?

              def type=: (String) -> String

              def initialize: (
                ?geometry: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson::Geometry,
                ?type: String
              ) -> void

              def to_hash: -> {
                geometry: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::Geojson::Geometry,
                type: String
              }

              type geometry = { coordinates: ::Array[Float], type: String }

              class Geometry < NextbillionSDK::Internal::Type::BaseModel
                attr_reader coordinates: ::Array[Float]?

                def coordinates=: (::Array[Float]) -> ::Array[Float]

                attr_reader type: String?

                def type=: (String) -> String

                def initialize: (
                  ?coordinates: ::Array[Float],
                  ?type: String
                ) -> void

                def to_hash: -> { coordinates: ::Array[Float], type: String }
              end
            end

            type snapped_point =
              {
                bearing: String,
                distance: Float,
                location: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint::Location,
                name: String,
                original_index: String
              }

            class SnappedPoint < NextbillionSDK::Internal::Type::BaseModel
              attr_reader bearing: String?

              def bearing=: (String) -> String

              attr_reader distance: Float?

              def distance=: (Float) -> Float

              attr_reader location: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint::Location?

              def location=: (
                NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint::Location
              ) -> NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint::Location

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader original_index: String?

              def original_index=: (String) -> String

              def initialize: (
                ?bearing: String,
                ?distance: Float,
                ?location: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint::Location,
                ?name: String,
                ?original_index: String
              ) -> void

              def to_hash: -> {
                bearing: String,
                distance: Float,
                location: NextbillionSDK::Models::Skynet::Asset::LocationListResponse::Data::SnappedPoint::Location,
                name: String,
                original_index: String
              }

              type location = { lat: Float, lon: Float }

              class Location < NextbillionSDK::Internal::Type::BaseModel
                attr_reader lat: Float?

                def lat=: (Float) -> Float

                attr_reader lon: Float?

                def lon=: (Float) -> Float

                def initialize: (?lat: Float, ?lon: Float) -> void

                def to_hash: -> { lat: Float, lon: Float }
              end
            end
          end
        end
      end
    end
  end
end
