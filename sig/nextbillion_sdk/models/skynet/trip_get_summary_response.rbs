module NextbillionSDK
  module Models
    module Skynet
      type trip_get_summary_response =
        {
          data: NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data,
          message: String,
          status: String
        }

      class TripGetSummaryResponse < NextbillionSDK::Internal::Type::BaseModel
        attr_reader data: NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data?

        def data=: (
          NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data
        ) -> NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data

        attr_reader message: String?

        def message=: (String) -> String

        attr_reader status: String?

        def status=: (String) -> String

        def initialize: (
          ?data: NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data,
          ?message: String,
          ?status: String
        ) -> void

        def to_hash: -> {
          data: NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data,
          message: String,
          status: String
        }

        type data =
          {
            trip: NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data::Trip
          }

        class Data < NextbillionSDK::Internal::Type::BaseModel
          attr_reader trip: NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data::Trip?

          def trip=: (
            NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data::Trip
          ) -> NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data::Trip

          def initialize: (
            ?trip: NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data::Trip
          ) -> void

          def to_hash: -> {
            trip: NextbillionSDK::Models::Skynet::TripGetSummaryResponse::Data::Trip
          }

          type trip =
            {
              id: String,
              asset: NextbillionSDK::Skynet::AssetDetails,
              asset_id: String,
              attributes: top,
              created_at: Integer,
              description: String,
              distance: Float,
              duration: Float,
              ended_at: Integer,
              geometry: ::Array[String],
              meta_data: top,
              name: String,
              route: ::Array[NextbillionSDK::Skynet::Asset::TrackLocation],
              started_at: Integer,
              state: String,
              stops: ::Array[NextbillionSDK::Skynet::TripStop],
              updated_at: Integer
            }

          class Trip < NextbillionSDK::Internal::Type::BaseModel
            attr_reader id: String?

            def id=: (String) -> String

            attr_reader asset: NextbillionSDK::Skynet::AssetDetails?

            def asset=: (
              NextbillionSDK::Skynet::AssetDetails
            ) -> NextbillionSDK::Skynet::AssetDetails

            attr_reader asset_id: String?

            def asset_id=: (String) -> String

            attr_reader attributes: top?

            def attributes=: (top) -> top

            attr_reader created_at: Integer?

            def created_at=: (Integer) -> Integer

            attr_reader description: String?

            def description=: (String) -> String

            attr_reader distance: Float?

            def distance=: (Float) -> Float

            attr_reader duration: Float?

            def duration=: (Float) -> Float

            attr_reader ended_at: Integer?

            def ended_at=: (Integer) -> Integer

            attr_reader geometry: ::Array[String]?

            def geometry=: (::Array[String]) -> ::Array[String]

            attr_reader meta_data: top?

            def meta_data=: (top) -> top

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader route: ::Array[NextbillionSDK::Skynet::Asset::TrackLocation]?

            def route=: (
              ::Array[NextbillionSDK::Skynet::Asset::TrackLocation]
            ) -> ::Array[NextbillionSDK::Skynet::Asset::TrackLocation]

            attr_reader started_at: Integer?

            def started_at=: (Integer) -> Integer

            attr_reader state: String?

            def state=: (String) -> String

            attr_reader stops: ::Array[NextbillionSDK::Skynet::TripStop]?

            def stops=: (
              ::Array[NextbillionSDK::Skynet::TripStop]
            ) -> ::Array[NextbillionSDK::Skynet::TripStop]

            attr_reader updated_at: Integer?

            def updated_at=: (Integer) -> Integer

            def initialize: (
              ?id: String,
              ?asset: NextbillionSDK::Skynet::AssetDetails,
              ?asset_id: String,
              ?attributes: top,
              ?created_at: Integer,
              ?description: String,
              ?distance: Float,
              ?duration: Float,
              ?ended_at: Integer,
              ?geometry: ::Array[String],
              ?meta_data: top,
              ?name: String,
              ?route: ::Array[NextbillionSDK::Skynet::Asset::TrackLocation],
              ?started_at: Integer,
              ?state: String,
              ?stops: ::Array[NextbillionSDK::Skynet::TripStop],
              ?updated_at: Integer
            ) -> void

            def to_hash: -> {
              id: String,
              asset: NextbillionSDK::Skynet::AssetDetails,
              asset_id: String,
              attributes: top,
              created_at: Integer,
              description: String,
              distance: Float,
              duration: Float,
              ended_at: Integer,
              geometry: ::Array[String],
              meta_data: top,
              name: String,
              route: ::Array[NextbillionSDK::Skynet::Asset::TrackLocation],
              started_at: Integer,
              state: String,
              stops: ::Array[NextbillionSDK::Skynet::TripStop],
              updated_at: Integer
            }
          end
        end
      end
    end
  end
end
