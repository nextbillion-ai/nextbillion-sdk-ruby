module NextbillionSDK
  module Models
    module Skynet
      type monitor_update_params =
        {
          key: String,
          description: String,
          geofence_config: NextbillionSDK::Skynet::MonitorUpdateParams::GeofenceConfig,
          geofence_ids: ::Array[String],
          idle_config: NextbillionSDK::Skynet::MonitorUpdateParams::IdleConfig,
          match_filter: NextbillionSDK::Skynet::MonitorUpdateParams::MatchFilter,
          meta_data: top,
          name: String,
          speeding_config: NextbillionSDK::Skynet::MonitorUpdateParams::SpeedingConfig,
          tags: ::Array[String],
          type: NextbillionSDK::Models::Skynet::MonitorUpdateParams::type_
        }
        & NextbillionSDK::Internal::Type::request_parameters

      class MonitorUpdateParams < NextbillionSDK::Internal::Type::BaseModel
        extend NextbillionSDK::Internal::Type::RequestParameters::Converter
        include NextbillionSDK::Internal::Type::RequestParameters

        attr_accessor key: String

        attr_reader description: String?

        def description=: (String) -> String

        attr_reader geofence_config: NextbillionSDK::Skynet::MonitorUpdateParams::GeofenceConfig?

        def geofence_config=: (
          NextbillionSDK::Skynet::MonitorUpdateParams::GeofenceConfig
        ) -> NextbillionSDK::Skynet::MonitorUpdateParams::GeofenceConfig

        attr_reader geofence_ids: ::Array[String]?

        def geofence_ids=: (::Array[String]) -> ::Array[String]

        attr_reader idle_config: NextbillionSDK::Skynet::MonitorUpdateParams::IdleConfig?

        def idle_config=: (
          NextbillionSDK::Skynet::MonitorUpdateParams::IdleConfig
        ) -> NextbillionSDK::Skynet::MonitorUpdateParams::IdleConfig

        attr_reader match_filter: NextbillionSDK::Skynet::MonitorUpdateParams::MatchFilter?

        def match_filter=: (
          NextbillionSDK::Skynet::MonitorUpdateParams::MatchFilter
        ) -> NextbillionSDK::Skynet::MonitorUpdateParams::MatchFilter

        attr_reader meta_data: top?

        def meta_data=: (top) -> top

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader speeding_config: NextbillionSDK::Skynet::MonitorUpdateParams::SpeedingConfig?

        def speeding_config=: (
          NextbillionSDK::Skynet::MonitorUpdateParams::SpeedingConfig
        ) -> NextbillionSDK::Skynet::MonitorUpdateParams::SpeedingConfig

        attr_reader tags: ::Array[String]?

        def tags=: (::Array[String]) -> ::Array[String]

        attr_reader type: NextbillionSDK::Models::Skynet::MonitorUpdateParams::type_?

        def type=: (
          NextbillionSDK::Models::Skynet::MonitorUpdateParams::type_
        ) -> NextbillionSDK::Models::Skynet::MonitorUpdateParams::type_

        def initialize: (
          key: String,
          ?description: String,
          ?geofence_config: NextbillionSDK::Skynet::MonitorUpdateParams::GeofenceConfig,
          ?geofence_ids: ::Array[String],
          ?idle_config: NextbillionSDK::Skynet::MonitorUpdateParams::IdleConfig,
          ?match_filter: NextbillionSDK::Skynet::MonitorUpdateParams::MatchFilter,
          ?meta_data: top,
          ?name: String,
          ?speeding_config: NextbillionSDK::Skynet::MonitorUpdateParams::SpeedingConfig,
          ?tags: ::Array[String],
          ?type: NextbillionSDK::Models::Skynet::MonitorUpdateParams::type_,
          ?request_options: NextbillionSDK::request_opts
        ) -> void

        def to_hash: -> {
          key: String,
          description: String,
          geofence_config: NextbillionSDK::Skynet::MonitorUpdateParams::GeofenceConfig,
          geofence_ids: ::Array[String],
          idle_config: NextbillionSDK::Skynet::MonitorUpdateParams::IdleConfig,
          match_filter: NextbillionSDK::Skynet::MonitorUpdateParams::MatchFilter,
          meta_data: top,
          name: String,
          speeding_config: NextbillionSDK::Skynet::MonitorUpdateParams::SpeedingConfig,
          tags: ::Array[String],
          type: NextbillionSDK::Models::Skynet::MonitorUpdateParams::type_,
          request_options: NextbillionSDK::RequestOptions
        }

        type geofence_config = { geofence_ids: ::Array[String] }

        class GeofenceConfig < NextbillionSDK::Internal::Type::BaseModel
          attr_accessor geofence_ids: ::Array[String]

          def initialize: (geofence_ids: ::Array[String]) -> void

          def to_hash: -> { geofence_ids: ::Array[String] }
        end

        type idle_config =
          { distance_tolerance: Float, time_tolerance: Integer }

        class IdleConfig < NextbillionSDK::Internal::Type::BaseModel
          attr_accessor distance_tolerance: Float

          attr_reader time_tolerance: Integer?

          def time_tolerance=: (Integer) -> Integer

          def initialize: (
            distance_tolerance: Float,
            ?time_tolerance: Integer
          ) -> void

          def to_hash: -> { distance_tolerance: Float, time_tolerance: Integer }
        end

        type match_filter =
          { include_all_of_attributes: top, include_any_of_attributes: top }

        class MatchFilter < NextbillionSDK::Internal::Type::BaseModel
          attr_reader include_all_of_attributes: top?

          def include_all_of_attributes=: (top) -> top

          attr_reader include_any_of_attributes: top?

          def include_any_of_attributes=: (top) -> top

          def initialize: (
            ?include_all_of_attributes: top,
            ?include_any_of_attributes: top
          ) -> void

          def to_hash: -> {
            include_all_of_attributes: top,
            include_any_of_attributes: top
          }
        end

        type speeding_config =
          {
            customer_speed_limit: String,
            time_tolerance: Integer,
            use_admin_speed_limit: bool
          }

        class SpeedingConfig < NextbillionSDK::Internal::Type::BaseModel
          attr_reader customer_speed_limit: String?

          def customer_speed_limit=: (String) -> String

          attr_reader time_tolerance: Integer?

          def time_tolerance=: (Integer) -> Integer

          attr_reader use_admin_speed_limit: bool?

          def use_admin_speed_limit=: (bool) -> bool

          def initialize: (
            ?customer_speed_limit: String,
            ?time_tolerance: Integer,
            ?use_admin_speed_limit: bool
          ) -> void

          def to_hash: -> {
            customer_speed_limit: String,
            time_tolerance: Integer,
            use_admin_speed_limit: bool
          }
        end

        type type_ =
          :"`enter`"
          | :"`exit`"
          | :"`enter_and_exit`"
          | :"`speeding`"
          | :"`idle`"

        module Type
          extend NextbillionSDK::Internal::Type::Enum

          ENTER: :"`enter`"
          EXIT: :"`exit`"
          ENTER_AND_EXIT: :"`enter_and_exit`"
          SPEEDING: :"`speeding`"
          IDLE: :"`idle`"

          def self?.values: -> ::Array[NextbillionSDK::Models::Skynet::MonitorUpdateParams::type_]
        end
      end
    end
  end
end
