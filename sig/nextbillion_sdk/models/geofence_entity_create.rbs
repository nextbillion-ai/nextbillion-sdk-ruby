module NextbillionSDK
  module Models
    type geofence_entity_create =
      {
        type: NextbillionSDK::Models::GeofenceEntityCreate::type_,
        circle: NextbillionSDK::GeofenceEntityCreate::Circle,
        custom_id: String,
        isochrone: NextbillionSDK::GeofenceEntityCreate::Isochrone,
        meta_data: top,
        name: String,
        polygon: NextbillionSDK::GeofenceEntityCreate::Polygon,
        tags: ::Array[String]
      }

    class GeofenceEntityCreate < NextbillionSDK::Internal::Type::BaseModel
      attr_accessor type: NextbillionSDK::Models::GeofenceEntityCreate::type_

      attr_reader circle: NextbillionSDK::GeofenceEntityCreate::Circle?

      def circle=: (
        NextbillionSDK::GeofenceEntityCreate::Circle
      ) -> NextbillionSDK::GeofenceEntityCreate::Circle

      attr_reader custom_id: String?

      def custom_id=: (String) -> String

      attr_reader isochrone: NextbillionSDK::GeofenceEntityCreate::Isochrone?

      def isochrone=: (
        NextbillionSDK::GeofenceEntityCreate::Isochrone
      ) -> NextbillionSDK::GeofenceEntityCreate::Isochrone

      attr_reader meta_data: top?

      def meta_data=: (top) -> top

      attr_reader name: String?

      def name=: (String) -> String

      attr_reader polygon: NextbillionSDK::GeofenceEntityCreate::Polygon?

      def polygon=: (
        NextbillionSDK::GeofenceEntityCreate::Polygon
      ) -> NextbillionSDK::GeofenceEntityCreate::Polygon

      attr_reader tags: ::Array[String]?

      def tags=: (::Array[String]) -> ::Array[String]

      def initialize: (
        type: NextbillionSDK::Models::GeofenceEntityCreate::type_,
        ?circle: NextbillionSDK::GeofenceEntityCreate::Circle,
        ?custom_id: String,
        ?isochrone: NextbillionSDK::GeofenceEntityCreate::Isochrone,
        ?meta_data: top,
        ?name: String,
        ?polygon: NextbillionSDK::GeofenceEntityCreate::Polygon,
        ?tags: ::Array[String]
      ) -> void

      def to_hash: -> {
        type: NextbillionSDK::Models::GeofenceEntityCreate::type_,
        circle: NextbillionSDK::GeofenceEntityCreate::Circle,
        custom_id: String,
        isochrone: NextbillionSDK::GeofenceEntityCreate::Isochrone,
        meta_data: top,
        name: String,
        polygon: NextbillionSDK::GeofenceEntityCreate::Polygon,
        tags: ::Array[String]
      }

      type type_ = :circle | :polygon | :isochrone

      module Type
        extend NextbillionSDK::Internal::Type::Enum

        CIRCLE: :circle
        POLYGON: :polygon
        ISOCHRONE: :isochrone

        def self?.values: -> ::Array[NextbillionSDK::Models::GeofenceEntityCreate::type_]
      end

      type circle =
        {
          center: NextbillionSDK::GeofenceEntityCreate::Circle::Center,
          radius: Float
        }

      class Circle < NextbillionSDK::Internal::Type::BaseModel
        attr_accessor center: NextbillionSDK::GeofenceEntityCreate::Circle::Center

        attr_accessor radius: Float

        def initialize: (
          center: NextbillionSDK::GeofenceEntityCreate::Circle::Center,
          radius: Float
        ) -> void

        def to_hash: -> {
          center: NextbillionSDK::GeofenceEntityCreate::Circle::Center,
          radius: Float
        }

        type center = { lat: Float, lon: Float }

        class Center < NextbillionSDK::Internal::Type::BaseModel
          attr_accessor lat: Float

          attr_accessor lon: Float

          def initialize: (lat: Float, lon: Float) -> void

          def to_hash: -> { lat: Float, lon: Float }
        end
      end

      type isochrone =
        {
          coordinates: String,
          contours_meter: Integer,
          contours_minute: Integer,
          denoise: Float,
          departure_time: Integer,
          mode: NextbillionSDK::Models::GeofenceEntityCreate::Isochrone::mode
        }

      class Isochrone < NextbillionSDK::Internal::Type::BaseModel
        attr_accessor coordinates: String

        attr_reader contours_meter: Integer?

        def contours_meter=: (Integer) -> Integer

        attr_reader contours_minute: Integer?

        def contours_minute=: (Integer) -> Integer

        attr_reader denoise: Float?

        def denoise=: (Float) -> Float

        attr_reader departure_time: Integer?

        def departure_time=: (Integer) -> Integer

        attr_reader mode: NextbillionSDK::Models::GeofenceEntityCreate::Isochrone::mode?

        def mode=: (
          NextbillionSDK::Models::GeofenceEntityCreate::Isochrone::mode
        ) -> NextbillionSDK::Models::GeofenceEntityCreate::Isochrone::mode

        def initialize: (
          coordinates: String,
          ?contours_meter: Integer,
          ?contours_minute: Integer,
          ?denoise: Float,
          ?departure_time: Integer,
          ?mode: NextbillionSDK::Models::GeofenceEntityCreate::Isochrone::mode
        ) -> void

        def to_hash: -> {
          coordinates: String,
          contours_meter: Integer,
          contours_minute: Integer,
          denoise: Float,
          departure_time: Integer,
          mode: NextbillionSDK::Models::GeofenceEntityCreate::Isochrone::mode
        }

        type mode = :car | :truck

        module Mode
          extend NextbillionSDK::Internal::Type::Enum

          CAR: :car
          TRUCK: :truck

          def self?.values: -> ::Array[NextbillionSDK::Models::GeofenceEntityCreate::Isochrone::mode]
        end
      end

      type polygon =
        { geojson: NextbillionSDK::GeofenceEntityCreate::Polygon::Geojson }

      class Polygon < NextbillionSDK::Internal::Type::BaseModel
        attr_accessor geojson: NextbillionSDK::GeofenceEntityCreate::Polygon::Geojson

        def initialize: (
          geojson: NextbillionSDK::GeofenceEntityCreate::Polygon::Geojson
        ) -> void

        def to_hash: -> {
          geojson: NextbillionSDK::GeofenceEntityCreate::Polygon::Geojson
        }

        type geojson = { coordinates: ::Array[::Array[Float]], type: String }

        class Geojson < NextbillionSDK::Internal::Type::BaseModel
          attr_accessor coordinates: ::Array[::Array[Float]]

          attr_accessor type: String

          def initialize: (
            coordinates: ::Array[::Array[Float]],
            type: String
          ) -> void

          def to_hash: -> { coordinates: ::Array[::Array[Float]], type: String }
        end
      end
    end
  end
end
