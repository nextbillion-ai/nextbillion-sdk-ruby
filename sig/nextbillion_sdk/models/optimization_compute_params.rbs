module NextbillionSDK
  module Models
    type optimization_compute_params =
      {
        coordinates: String,
        key: String,
        approaches: NextbillionSDK::Models::OptimizationComputeParams::approaches,
        destination: NextbillionSDK::Models::OptimizationComputeParams::destination,
        geometries: NextbillionSDK::Models::OptimizationComputeParams::geometries,
        mode: NextbillionSDK::Models::OptimizationComputeParams::mode,
        roundtrip: bool,
        source: NextbillionSDK::Models::OptimizationComputeParams::source,
        with_geometry: bool
      }
      & NextbillionSDK::Internal::Type::request_parameters

    class OptimizationComputeParams < NextbillionSDK::Internal::Type::BaseModel
      extend NextbillionSDK::Internal::Type::RequestParameters::Converter
      include NextbillionSDK::Internal::Type::RequestParameters

      attr_accessor coordinates: String

      attr_accessor key: String

      attr_reader approaches: NextbillionSDK::Models::OptimizationComputeParams::approaches?

      def approaches=: (
        NextbillionSDK::Models::OptimizationComputeParams::approaches
      ) -> NextbillionSDK::Models::OptimizationComputeParams::approaches

      attr_reader destination: NextbillionSDK::Models::OptimizationComputeParams::destination?

      def destination=: (
        NextbillionSDK::Models::OptimizationComputeParams::destination
      ) -> NextbillionSDK::Models::OptimizationComputeParams::destination

      attr_reader geometries: NextbillionSDK::Models::OptimizationComputeParams::geometries?

      def geometries=: (
        NextbillionSDK::Models::OptimizationComputeParams::geometries
      ) -> NextbillionSDK::Models::OptimizationComputeParams::geometries

      attr_reader mode: NextbillionSDK::Models::OptimizationComputeParams::mode?

      def mode=: (
        NextbillionSDK::Models::OptimizationComputeParams::mode
      ) -> NextbillionSDK::Models::OptimizationComputeParams::mode

      attr_reader roundtrip: bool?

      def roundtrip=: (bool) -> bool

      attr_reader source: NextbillionSDK::Models::OptimizationComputeParams::source?

      def source=: (
        NextbillionSDK::Models::OptimizationComputeParams::source
      ) -> NextbillionSDK::Models::OptimizationComputeParams::source

      attr_reader with_geometry: bool?

      def with_geometry=: (bool) -> bool

      def initialize: (
        coordinates: String,
        key: String,
        ?approaches: NextbillionSDK::Models::OptimizationComputeParams::approaches,
        ?destination: NextbillionSDK::Models::OptimizationComputeParams::destination,
        ?geometries: NextbillionSDK::Models::OptimizationComputeParams::geometries,
        ?mode: NextbillionSDK::Models::OptimizationComputeParams::mode,
        ?roundtrip: bool,
        ?source: NextbillionSDK::Models::OptimizationComputeParams::source,
        ?with_geometry: bool,
        ?request_options: NextbillionSDK::request_opts
      ) -> void

      def to_hash: -> {
        coordinates: String,
        key: String,
        approaches: NextbillionSDK::Models::OptimizationComputeParams::approaches,
        destination: NextbillionSDK::Models::OptimizationComputeParams::destination,
        geometries: NextbillionSDK::Models::OptimizationComputeParams::geometries,
        mode: NextbillionSDK::Models::OptimizationComputeParams::mode,
        roundtrip: bool,
        source: NextbillionSDK::Models::OptimizationComputeParams::source,
        with_geometry: bool,
        request_options: NextbillionSDK::RequestOptions
      }

      type approaches = :unrestricted | :curb

      module Approaches
        extend NextbillionSDK::Internal::Type::Enum

        UNRESTRICTED: :unrestricted
        CURB: :curb

        def self?.values: -> ::Array[NextbillionSDK::Models::OptimizationComputeParams::approaches]
      end

      type destination = :any | :last

      module Destination
        extend NextbillionSDK::Internal::Type::Enum

        ANY: :any
        LAST: :last

        def self?.values: -> ::Array[NextbillionSDK::Models::OptimizationComputeParams::destination]
      end

      type geometries = :polyline | :polyline6 | :geojson

      module Geometries
        extend NextbillionSDK::Internal::Type::Enum

        POLYLINE: :polyline
        POLYLINE6: :polyline6
        GEOJSON: :geojson

        def self?.values: -> ::Array[NextbillionSDK::Models::OptimizationComputeParams::geometries]
      end

      type mode = :car | :truck

      module Mode
        extend NextbillionSDK::Internal::Type::Enum

        CAR: :car
        TRUCK: :truck

        def self?.values: -> ::Array[NextbillionSDK::Models::OptimizationComputeParams::mode]
      end

      type source = :any | :first

      module Source
        extend NextbillionSDK::Internal::Type::Enum

        ANY: :any
        FIRST: :first

        def self?.values: -> ::Array[NextbillionSDK::Models::OptimizationComputeParams::source]
      end
    end
  end
end
