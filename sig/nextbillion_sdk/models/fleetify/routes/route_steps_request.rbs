module NextbillionSDK
  module Models
    module Fleetify
      class RouteStepsRequest = Routes::RouteStepsRequest

      module Routes
        type route_steps_request =
          {
            arrival: Integer,
            location: ::Array[Float],
            type: NextbillionSDK::Models::Fleetify::Routes::RouteStepsRequest::type_,
            address: String,
            completion_mode: NextbillionSDK::Models::Fleetify::Routes::route_step_completion_mode,
            document_template_id: String,
            duration: Integer,
            geofence_config: NextbillionSDK::Fleetify::Routes::RouteStepGeofenceConfig,
            meta: NextbillionSDK::Fleetify::Routes::RouteStepsRequest::Meta
          }

        class RouteStepsRequest < NextbillionSDK::Internal::Type::BaseModel
          attr_accessor arrival: Integer

          attr_accessor location: ::Array[Float]

          attr_accessor type: NextbillionSDK::Models::Fleetify::Routes::RouteStepsRequest::type_

          attr_reader address: String?

          def address=: (String) -> String

          attr_reader completion_mode: NextbillionSDK::Models::Fleetify::Routes::route_step_completion_mode?

          def completion_mode=: (
            NextbillionSDK::Models::Fleetify::Routes::route_step_completion_mode
          ) -> NextbillionSDK::Models::Fleetify::Routes::route_step_completion_mode

          attr_reader document_template_id: String?

          def document_template_id=: (String) -> String

          attr_reader duration: Integer?

          def duration=: (Integer) -> Integer

          attr_reader geofence_config: NextbillionSDK::Fleetify::Routes::RouteStepGeofenceConfig?

          def geofence_config=: (
            NextbillionSDK::Fleetify::Routes::RouteStepGeofenceConfig
          ) -> NextbillionSDK::Fleetify::Routes::RouteStepGeofenceConfig

          attr_reader meta: NextbillionSDK::Fleetify::Routes::RouteStepsRequest::Meta?

          def meta=: (
            NextbillionSDK::Fleetify::Routes::RouteStepsRequest::Meta
          ) -> NextbillionSDK::Fleetify::Routes::RouteStepsRequest::Meta

          def initialize: (
            arrival: Integer,
            location: ::Array[Float],
            type: NextbillionSDK::Models::Fleetify::Routes::RouteStepsRequest::type_,
            ?address: String,
            ?completion_mode: NextbillionSDK::Models::Fleetify::Routes::route_step_completion_mode,
            ?document_template_id: String,
            ?duration: Integer,
            ?geofence_config: NextbillionSDK::Fleetify::Routes::RouteStepGeofenceConfig,
            ?meta: NextbillionSDK::Fleetify::Routes::RouteStepsRequest::Meta
          ) -> void

          def to_hash: -> {
            arrival: Integer,
            location: ::Array[Float],
            type: NextbillionSDK::Models::Fleetify::Routes::RouteStepsRequest::type_,
            address: String,
            completion_mode: NextbillionSDK::Models::Fleetify::Routes::route_step_completion_mode,
            document_template_id: String,
            duration: Integer,
            geofence_config: NextbillionSDK::Fleetify::Routes::RouteStepGeofenceConfig,
            meta: NextbillionSDK::Fleetify::Routes::RouteStepsRequest::Meta
          }

          type type_ =
            :"`start`"
            | :"`job`"
            | :"`pickup`"
            | :"`delivery`"
            | :"`break`"
            | :"`layover`"
            | :"`end`"

          module Type
            extend NextbillionSDK::Internal::Type::Enum

            START: :"`start`"
            JOB: :"`job`"
            PICKUP: :"`pickup`"
            DELIVERY: :"`delivery`"
            BREAK: :"`break`"
            LAYOVER: :"`layover`"
            END_: :"`end`"

            def self?.values: -> ::Array[NextbillionSDK::Models::Fleetify::Routes::RouteStepsRequest::type_]
          end

          type meta =
            {
              customer_name: String,
              customer_phone_number: String,
              instructions: String
            }

          class Meta < NextbillionSDK::Internal::Type::BaseModel
            attr_reader customer_name: String?

            def customer_name=: (String) -> String

            attr_reader customer_phone_number: String?

            def customer_phone_number=: (String) -> String

            attr_reader instructions: String?

            def instructions=: (String) -> String

            def initialize: (
              ?customer_name: String,
              ?customer_phone_number: String,
              ?instructions: String
            ) -> void

            def to_hash: -> {
              customer_name: String,
              customer_phone_number: String,
              instructions: String
            }
          end
        end
      end
    end
  end
end
