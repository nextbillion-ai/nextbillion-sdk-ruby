module NextbillionSDK
  module Models
    module Fleetify
      type route_create_params =
        {
          key: String,
          driver_email: String,
          steps: ::Array[NextbillionSDK::Fleetify::Routes::RouteStepsRequest],
          distance: Integer,
          document_template_id: String,
          ro_request_id: String,
          routing: NextbillionSDK::Fleetify::RouteCreateParams::Routing
        }
        & NextbillionSDK::Internal::Type::request_parameters

      class RouteCreateParams < NextbillionSDK::Internal::Type::BaseModel
        extend NextbillionSDK::Internal::Type::RequestParameters::Converter
        include NextbillionSDK::Internal::Type::RequestParameters

        attr_accessor key: String

        attr_accessor driver_email: String

        attr_accessor steps: ::Array[NextbillionSDK::Fleetify::Routes::RouteStepsRequest]

        attr_reader distance: Integer?

        def distance=: (Integer) -> Integer

        attr_reader document_template_id: String?

        def document_template_id=: (String) -> String

        attr_reader ro_request_id: String?

        def ro_request_id=: (String) -> String

        attr_reader routing: NextbillionSDK::Fleetify::RouteCreateParams::Routing?

        def routing=: (
          NextbillionSDK::Fleetify::RouteCreateParams::Routing
        ) -> NextbillionSDK::Fleetify::RouteCreateParams::Routing

        def initialize: (
          key: String,
          driver_email: String,
          steps: ::Array[NextbillionSDK::Fleetify::Routes::RouteStepsRequest],
          ?distance: Integer,
          ?document_template_id: String,
          ?ro_request_id: String,
          ?routing: NextbillionSDK::Fleetify::RouteCreateParams::Routing,
          ?request_options: NextbillionSDK::request_opts
        ) -> void

        def to_hash: -> {
          key: String,
          driver_email: String,
          steps: ::Array[NextbillionSDK::Fleetify::Routes::RouteStepsRequest],
          distance: Integer,
          document_template_id: String,
          ro_request_id: String,
          routing: NextbillionSDK::Fleetify::RouteCreateParams::Routing,
          request_options: NextbillionSDK::RequestOptions
        }

        type routing =
          {
            approaches: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::approaches,
            avoid: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::avoid,
            hazmat_type: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::hazmat_type,
            mode: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::mode,
            truck_axle_load: Integer,
            truck_size: String,
            truck_weight: Integer
          }

        class Routing < NextbillionSDK::Internal::Type::BaseModel
          attr_reader approaches: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::approaches?

          def approaches=: (
            NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::approaches
          ) -> NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::approaches

          attr_reader avoid: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::avoid?

          def avoid=: (
            NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::avoid
          ) -> NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::avoid

          attr_reader hazmat_type: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::hazmat_type?

          def hazmat_type=: (
            NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::hazmat_type
          ) -> NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::hazmat_type

          attr_reader mode: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::mode?

          def mode=: (
            NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::mode
          ) -> NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::mode

          attr_reader truck_axle_load: Integer?

          def truck_axle_load=: (Integer) -> Integer

          attr_reader truck_size: String?

          def truck_size=: (String) -> String

          attr_reader truck_weight: Integer?

          def truck_weight=: (Integer) -> Integer

          def initialize: (
            ?approaches: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::approaches,
            ?avoid: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::avoid,
            ?hazmat_type: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::hazmat_type,
            ?mode: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::mode,
            ?truck_axle_load: Integer,
            ?truck_size: String,
            ?truck_weight: Integer
          ) -> void

          def to_hash: -> {
            approaches: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::approaches,
            avoid: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::avoid,
            hazmat_type: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::hazmat_type,
            mode: NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::mode,
            truck_axle_load: Integer,
            truck_size: String,
            truck_weight: Integer
          }

          type approaches = :"`unrestricted`" | :"`curb`"

          module Approaches
            extend NextbillionSDK::Internal::Type::Enum

            UNRESTRICTED: :"`unrestricted`"
            CURB: :"`curb`"

            def self?.values: -> ::Array[NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::approaches]
          end

          type avoid =
            :"`toll`"
            | :"`highway`"
            | :"`ferry`"
            | :"`sharp_turn`"
            | :"`uturn`"
            | :"`left_turn`"
            | :"`right_turn`"
            | :"`service_road`"
            | :"`none`"

          module Avoid
            extend NextbillionSDK::Internal::Type::Enum

            TOLL: :"`toll`"
            HIGHWAY: :"`highway`"
            FERRY: :"`ferry`"
            SHARP_TURN: :"`sharp_turn`"
            UTURN: :"`uturn`"
            LEFT_TURN: :"`left_turn`"
            RIGHT_TURN: :"`right_turn`"
            SERVICE_ROAD: :"`service_road`"
            NONE: :"`none`"

            def self?.values: -> ::Array[NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::avoid]
          end

          type hazmat_type =
            :"`general`"
            | :"`circumstantial`"
            | :"`explosive`"
            | :"`harmful_to_water`"

          module HazmatType
            extend NextbillionSDK::Internal::Type::Enum

            GENERAL: :"`general`"
            CIRCUMSTANTIAL: :"`circumstantial`"
            EXPLOSIVE: :"`explosive`"
            HARMFUL_TO_WATER: :"`harmful_to_water`"

            def self?.values: -> ::Array[NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::hazmat_type]
          end

          type mode = :"`car`"

          module Mode
            extend NextbillionSDK::Internal::Type::Enum

            CAR: :"`car`"

            def self?.values: -> ::Array[NextbillionSDK::Models::Fleetify::RouteCreateParams::Routing::mode]
          end
        end
      end
    end
  end
end
