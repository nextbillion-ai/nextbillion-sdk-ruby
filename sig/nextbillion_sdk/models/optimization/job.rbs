module NextbillionSDK
  module Models
    module Optimization
      type job =
        {
          id: String,
          location_index: Integer,
          delivery: ::Array[Integer],
          depot_ids: ::Array[String],
          description: String,
          follow_lifo_order: bool,
          incompatible_load_types: ::Array[String],
          joint_order: Integer,
          load_types: ::Array[String],
          max_visit_lateness: Integer,
          metadata: top,
          outsourcing_cost: Integer,
          pickup: ::Array[Integer],
          priority: Integer,
          revenue: Integer,
          sequence_order: Integer,
          service: Integer,
          setup: Integer,
          skills: ::Array[Integer],
          time_windows: ::Array[::Array[Integer]],
          volume: NextbillionSDK::Optimization::Job::Volume,
          zones: ::Array[Integer]
        }

      class Job < NextbillionSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor location_index: Integer

        attr_reader delivery: ::Array[Integer]?

        def delivery=: (::Array[Integer]) -> ::Array[Integer]

        attr_reader depot_ids: ::Array[String]?

        def depot_ids=: (::Array[String]) -> ::Array[String]

        attr_reader description: String?

        def description=: (String) -> String

        attr_reader follow_lifo_order: bool?

        def follow_lifo_order=: (bool) -> bool

        attr_reader incompatible_load_types: ::Array[String]?

        def incompatible_load_types=: (::Array[String]) -> ::Array[String]

        attr_reader joint_order: Integer?

        def joint_order=: (Integer) -> Integer

        attr_reader load_types: ::Array[String]?

        def load_types=: (::Array[String]) -> ::Array[String]

        attr_reader max_visit_lateness: Integer?

        def max_visit_lateness=: (Integer) -> Integer

        attr_reader metadata: top?

        def metadata=: (top) -> top

        attr_reader outsourcing_cost: Integer?

        def outsourcing_cost=: (Integer) -> Integer

        attr_reader pickup: ::Array[Integer]?

        def pickup=: (::Array[Integer]) -> ::Array[Integer]

        attr_reader priority: Integer?

        def priority=: (Integer) -> Integer

        attr_reader revenue: Integer?

        def revenue=: (Integer) -> Integer

        attr_reader sequence_order: Integer?

        def sequence_order=: (Integer) -> Integer

        attr_reader service: Integer?

        def service=: (Integer) -> Integer

        attr_reader setup: Integer?

        def setup=: (Integer) -> Integer

        attr_reader skills: ::Array[Integer]?

        def skills=: (::Array[Integer]) -> ::Array[Integer]

        attr_reader time_windows: ::Array[::Array[Integer]]?

        def time_windows=: (
          ::Array[::Array[Integer]]
        ) -> ::Array[::Array[Integer]]

        attr_reader volume: NextbillionSDK::Optimization::Job::Volume?

        def volume=: (
          NextbillionSDK::Optimization::Job::Volume
        ) -> NextbillionSDK::Optimization::Job::Volume

        attr_reader zones: ::Array[Integer]?

        def zones=: (::Array[Integer]) -> ::Array[Integer]

        def initialize: (
          id: String,
          location_index: Integer,
          ?delivery: ::Array[Integer],
          ?depot_ids: ::Array[String],
          ?description: String,
          ?follow_lifo_order: bool,
          ?incompatible_load_types: ::Array[String],
          ?joint_order: Integer,
          ?load_types: ::Array[String],
          ?max_visit_lateness: Integer,
          ?metadata: top,
          ?outsourcing_cost: Integer,
          ?pickup: ::Array[Integer],
          ?priority: Integer,
          ?revenue: Integer,
          ?sequence_order: Integer,
          ?service: Integer,
          ?setup: Integer,
          ?skills: ::Array[Integer],
          ?time_windows: ::Array[::Array[Integer]],
          ?volume: NextbillionSDK::Optimization::Job::Volume,
          ?zones: ::Array[Integer]
        ) -> void

        def to_hash: -> {
          id: String,
          location_index: Integer,
          delivery: ::Array[Integer],
          depot_ids: ::Array[String],
          description: String,
          follow_lifo_order: bool,
          incompatible_load_types: ::Array[String],
          joint_order: Integer,
          load_types: ::Array[String],
          max_visit_lateness: Integer,
          metadata: top,
          outsourcing_cost: Integer,
          pickup: ::Array[Integer],
          priority: Integer,
          revenue: Integer,
          sequence_order: Integer,
          service: Integer,
          setup: Integer,
          skills: ::Array[Integer],
          time_windows: ::Array[::Array[Integer]],
          volume: NextbillionSDK::Optimization::Job::Volume,
          zones: ::Array[Integer]
        }

        type volume =
          {
            alignment: NextbillionSDK::Models::Optimization::Job::Volume::alignment,
            depth: Float,
            height: Float,
            width: Float
          }

        class Volume < NextbillionSDK::Internal::Type::BaseModel
          attr_reader alignment: NextbillionSDK::Models::Optimization::Job::Volume::alignment?

          def alignment=: (
            NextbillionSDK::Models::Optimization::Job::Volume::alignment
          ) -> NextbillionSDK::Models::Optimization::Job::Volume::alignment

          attr_reader depth: Float?

          def depth=: (Float) -> Float

          attr_reader height: Float?

          def height=: (Float) -> Float

          attr_reader width: Float?

          def width=: (Float) -> Float

          def initialize: (
            ?alignment: NextbillionSDK::Models::Optimization::Job::Volume::alignment,
            ?depth: Float,
            ?height: Float,
            ?width: Float
          ) -> void

          def to_hash: -> {
            alignment: NextbillionSDK::Models::Optimization::Job::Volume::alignment,
            depth: Float,
            height: Float,
            width: Float
          }

          type alignment = :strict | :parallel | :fixed_bottom

          module Alignment
            extend NextbillionSDK::Internal::Type::Enum

            STRICT: :strict
            PARALLEL: :parallel
            FIXED_BOTTOM: :fixed_bottom

            def self?.values: -> ::Array[NextbillionSDK::Models::Optimization::Job::Volume::alignment]
          end
        end
      end
    end
  end
end
