module NextbillionSDK
  module Models
    type geofence_contains_response =
      {
        data: NextbillionSDK::Models::GeofenceContainsResponse::Data,
        status: String
      }

    class GeofenceContainsResponse < NextbillionSDK::Internal::Type::BaseModel
      attr_reader data: NextbillionSDK::Models::GeofenceContainsResponse::Data?

      def data=: (
        NextbillionSDK::Models::GeofenceContainsResponse::Data
      ) -> NextbillionSDK::Models::GeofenceContainsResponse::Data

      attr_reader status: String?

      def status=: (String) -> String

      def initialize: (
        ?data: NextbillionSDK::Models::GeofenceContainsResponse::Data,
        ?status: String
      ) -> void

      def to_hash: -> {
        data: NextbillionSDK::Models::GeofenceContainsResponse::Data,
        status: String
      }

      type data =
        {
          result_list: ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList]
        }

      class Data < NextbillionSDK::Internal::Type::BaseModel
        attr_reader result_list: ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList]?

        def result_list=: (
          ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList]
        ) -> ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList]

        def initialize: (
          ?result_list: ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList]
        ) -> void

        def to_hash: -> {
          result_list: ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList]
        }

        type result_list =
          {
            geofence_detail: NextbillionSDK::GeofenceAPI,
            geofence_id: String,
            result: ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList::Result]
          }

        class ResultList < NextbillionSDK::Internal::Type::BaseModel
          attr_reader geofence_detail: NextbillionSDK::GeofenceAPI?

          def geofence_detail=: (
            NextbillionSDK::GeofenceAPI
          ) -> NextbillionSDK::GeofenceAPI

          attr_reader geofence_id: String?

          def geofence_id=: (String) -> String

          attr_reader result: ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList::Result]?

          def result=: (
            ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList::Result]
          ) -> ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList::Result]

          def initialize: (
            ?geofence_detail: NextbillionSDK::GeofenceAPI,
            ?geofence_id: String,
            ?result: ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList::Result]
          ) -> void

          def to_hash: -> {
            geofence_detail: NextbillionSDK::GeofenceAPI,
            geofence_id: String,
            result: ::Array[NextbillionSDK::Models::GeofenceContainsResponse::Data::ResultList::Result]
          }

          type result = { contain: bool, location_index: Integer }

          class Result < NextbillionSDK::Internal::Type::BaseModel
            attr_reader contain: bool?

            def contain=: (bool) -> bool

            attr_reader location_index: Integer?

            def location_index=: (Integer) -> Integer

            def initialize: (?contain: bool, ?location_index: Integer) -> void

            def to_hash: -> { contain: bool, location_index: Integer }
          end
        end
      end
    end
  end
end
