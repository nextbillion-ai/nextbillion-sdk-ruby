module NextbillionSDK
  module Models
    type geofence_update_params =
      {
        key: String,
        circle: NextbillionSDK::GeofenceUpdateParams::Circle,
        isochrone: NextbillionSDK::GeofenceUpdateParams::Isochrone,
        meta_data: top,
        name: String,
        polygon: NextbillionSDK::GeofenceUpdateParams::Polygon,
        tags: ::Array[String],
        type: NextbillionSDK::Models::GeofenceUpdateParams::type_
      }
      & NextbillionSDK::Internal::Type::request_parameters

    class GeofenceUpdateParams < NextbillionSDK::Internal::Type::BaseModel
      extend NextbillionSDK::Internal::Type::RequestParameters::Converter
      include NextbillionSDK::Internal::Type::RequestParameters

      attr_accessor key: String

      attr_reader circle: NextbillionSDK::GeofenceUpdateParams::Circle?

      def circle=: (
        NextbillionSDK::GeofenceUpdateParams::Circle
      ) -> NextbillionSDK::GeofenceUpdateParams::Circle

      attr_reader isochrone: NextbillionSDK::GeofenceUpdateParams::Isochrone?

      def isochrone=: (
        NextbillionSDK::GeofenceUpdateParams::Isochrone
      ) -> NextbillionSDK::GeofenceUpdateParams::Isochrone

      attr_reader meta_data: top?

      def meta_data=: (top) -> top

      attr_reader name: String?

      def name=: (String) -> String

      attr_reader polygon: NextbillionSDK::GeofenceUpdateParams::Polygon?

      def polygon=: (
        NextbillionSDK::GeofenceUpdateParams::Polygon
      ) -> NextbillionSDK::GeofenceUpdateParams::Polygon

      attr_reader tags: ::Array[String]?

      def tags=: (::Array[String]) -> ::Array[String]

      attr_reader type: NextbillionSDK::Models::GeofenceUpdateParams::type_?

      def type=: (
        NextbillionSDK::Models::GeofenceUpdateParams::type_
      ) -> NextbillionSDK::Models::GeofenceUpdateParams::type_

      def initialize: (
        key: String,
        ?circle: NextbillionSDK::GeofenceUpdateParams::Circle,
        ?isochrone: NextbillionSDK::GeofenceUpdateParams::Isochrone,
        ?meta_data: top,
        ?name: String,
        ?polygon: NextbillionSDK::GeofenceUpdateParams::Polygon,
        ?tags: ::Array[String],
        ?type: NextbillionSDK::Models::GeofenceUpdateParams::type_,
        ?request_options: NextbillionSDK::request_opts
      ) -> void

      def to_hash: -> {
        key: String,
        circle: NextbillionSDK::GeofenceUpdateParams::Circle,
        isochrone: NextbillionSDK::GeofenceUpdateParams::Isochrone,
        meta_data: top,
        name: String,
        polygon: NextbillionSDK::GeofenceUpdateParams::Polygon,
        tags: ::Array[String],
        type: NextbillionSDK::Models::GeofenceUpdateParams::type_,
        request_options: NextbillionSDK::RequestOptions
      }

      type circle =
        {
          center: NextbillionSDK::GeofenceUpdateParams::Circle::Center,
          radius: Float
        }

      class Circle < NextbillionSDK::Internal::Type::BaseModel
        attr_accessor center: NextbillionSDK::GeofenceUpdateParams::Circle::Center

        attr_reader radius: Float?

        def radius=: (Float) -> Float

        def initialize: (
          center: NextbillionSDK::GeofenceUpdateParams::Circle::Center,
          ?radius: Float
        ) -> void

        def to_hash: -> {
          center: NextbillionSDK::GeofenceUpdateParams::Circle::Center,
          radius: Float
        }

        type center = { lat: Float, lon: Float }

        class Center < NextbillionSDK::Internal::Type::BaseModel
          attr_reader lat: Float?

          def lat=: (Float) -> Float

          attr_reader lon: Float?

          def lon=: (Float) -> Float

          def initialize: (?lat: Float, ?lon: Float) -> void

          def to_hash: -> { lat: Float, lon: Float }
        end
      end

      type isochrone =
        {
          contours_meter: Integer,
          contours_minute: Integer,
          coordinates: String,
          denoise: Float,
          departure_time: Integer,
          mode: String
        }

      class Isochrone < NextbillionSDK::Internal::Type::BaseModel
        attr_reader contours_meter: Integer?

        def contours_meter=: (Integer) -> Integer

        attr_reader contours_minute: Integer?

        def contours_minute=: (Integer) -> Integer

        attr_reader coordinates: String?

        def coordinates=: (String) -> String

        attr_reader denoise: Float?

        def denoise=: (Float) -> Float

        attr_reader departure_time: Integer?

        def departure_time=: (Integer) -> Integer

        attr_reader mode: String?

        def mode=: (String) -> String

        def initialize: (
          ?contours_meter: Integer,
          ?contours_minute: Integer,
          ?coordinates: String,
          ?denoise: Float,
          ?departure_time: Integer,
          ?mode: String
        ) -> void

        def to_hash: -> {
          contours_meter: Integer,
          contours_minute: Integer,
          coordinates: String,
          denoise: Float,
          departure_time: Integer,
          mode: String
        }
      end

      type polygon =
        { geojson: NextbillionSDK::GeofenceUpdateParams::Polygon::Geojson }

      class Polygon < NextbillionSDK::Internal::Type::BaseModel
        attr_reader geojson: NextbillionSDK::GeofenceUpdateParams::Polygon::Geojson?

        def geojson=: (
          NextbillionSDK::GeofenceUpdateParams::Polygon::Geojson
        ) -> NextbillionSDK::GeofenceUpdateParams::Polygon::Geojson

        def initialize: (
          ?geojson: NextbillionSDK::GeofenceUpdateParams::Polygon::Geojson
        ) -> void

        def to_hash: -> {
          geojson: NextbillionSDK::GeofenceUpdateParams::Polygon::Geojson
        }

        type geojson = { geometry: ::Array[::Array[Float]], type: String }

        class Geojson < NextbillionSDK::Internal::Type::BaseModel
          attr_reader geometry: ::Array[::Array[Float]]?

          def geometry=: (::Array[::Array[Float]]) -> ::Array[::Array[Float]]

          attr_reader type: String?

          def type=: (String) -> String

          def initialize: (
            ?geometry: ::Array[::Array[Float]],
            ?type: String
          ) -> void

          def to_hash: -> { geometry: ::Array[::Array[Float]], type: String }
        end
      end

      type type_ = :"`circle`" | :"`polygon`" | :"`isochrone`"

      module Type
        extend NextbillionSDK::Internal::Type::Enum

        CIRCLE: :"`circle`"
        POLYGON: :"`polygon`"
        ISOCHRONE: :"`isochrone`"

        def self?.values: -> ::Array[NextbillionSDK::Models::GeofenceUpdateParams::type_]
      end
    end
  end
end
