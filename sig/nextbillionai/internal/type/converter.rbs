module Nextbillionai
  module Internal
    module Type
      module Converter
        extend Nextbillionai::Internal::Util::SorbetRuntimeSupport

        type input = Nextbillionai::Internal::Type::Converter | Class

        type coerce_state =
          {
            translate_names: bool,
            strictness: bool,
            exactness: { yes: Integer, no: Integer, maybe: Integer },
            error: Class,
            branched: Integer
          }

        type dump_state = { can_retry: bool }

        def coerce: (
          top value,
          state: Nextbillionai::Internal::Type::Converter::coerce_state
        ) -> top

        def dump: (
          top value,
          state: Nextbillionai::Internal::Type::Converter::dump_state
        ) -> top

        def inspect: (?depth: Integer) -> String

        def self.type_info: (
          {
            const: (nil | bool | Integer | Float | Symbol)?,
            enum: ^-> Nextbillionai::Internal::Type::Converter::input?,
            union: ^-> Nextbillionai::Internal::Type::Converter::input?
          }
          | ^-> Nextbillionai::Internal::Type::Converter::input
          | Nextbillionai::Internal::Type::Converter::input spec
        ) -> (^-> top)

        def self.new_coerce_state: (
          ?translate_names: bool
        ) -> Nextbillionai::Internal::Type::Converter::coerce_state

        def self.coerce: (
          Nextbillionai::Internal::Type::Converter::input target,
          top value,
          ?state: Nextbillionai::Internal::Type::Converter::coerce_state
        ) -> top

        def self.dump: (
          Nextbillionai::Internal::Type::Converter::input target,
          top value,
          ?state: Nextbillionai::Internal::Type::Converter::dump_state
        ) -> top

        def self.inspect: (top target, depth: Integer) -> String
      end
    end
  end
end
