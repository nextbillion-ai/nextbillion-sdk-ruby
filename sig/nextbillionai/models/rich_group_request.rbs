module Nextbillionai
  module Models
    type rich_group_request =
      {
        area: String,
        name: String,
        comment: String,
        direction: Nextbillionai::Models::RichGroupRequest::direction,
        end_time: Float,
        geofence: ::Array[::Array[Float]],
        height: Integer,
        length: Integer,
        mode: ::Array[Nextbillionai::Models::RichGroupRequest::mode],
        repeat_on: String,
        segments: ::Array[Nextbillionai::RichGroupRequest::Segment],
        speed: Float,
        speed_limit: Float,
        start_time: Float,
        tracks: ::Array[::Array[Float]],
        turns: ::Array[Nextbillionai::RichGroupRequest::Turn],
        weight: Integer,
        width: Integer
      }

    class RichGroupRequest < Nextbillionai::Internal::Type::BaseModel
      attr_accessor area: String

      attr_accessor name: String

      attr_reader comment: String?

      def comment=: (String) -> String

      attr_reader direction: Nextbillionai::Models::RichGroupRequest::direction?

      def direction=: (
        Nextbillionai::Models::RichGroupRequest::direction
      ) -> Nextbillionai::Models::RichGroupRequest::direction

      attr_reader end_time: Float?

      def end_time=: (Float) -> Float

      attr_reader geofence: ::Array[::Array[Float]]?

      def geofence=: (::Array[::Array[Float]]) -> ::Array[::Array[Float]]

      attr_reader height: Integer?

      def height=: (Integer) -> Integer

      attr_reader length: Integer?

      def length=: (Integer) -> Integer

      attr_reader mode: ::Array[Nextbillionai::Models::RichGroupRequest::mode]?

      def mode=: (
        ::Array[Nextbillionai::Models::RichGroupRequest::mode]
      ) -> ::Array[Nextbillionai::Models::RichGroupRequest::mode]

      attr_reader repeat_on: String?

      def repeat_on=: (String) -> String

      attr_reader segments: ::Array[Nextbillionai::RichGroupRequest::Segment]?

      def segments=: (
        ::Array[Nextbillionai::RichGroupRequest::Segment]
      ) -> ::Array[Nextbillionai::RichGroupRequest::Segment]

      attr_reader speed: Float?

      def speed=: (Float) -> Float

      attr_reader speed_limit: Float?

      def speed_limit=: (Float) -> Float

      attr_reader start_time: Float?

      def start_time=: (Float) -> Float

      attr_reader tracks: ::Array[::Array[Float]]?

      def tracks=: (::Array[::Array[Float]]) -> ::Array[::Array[Float]]

      attr_reader turns: ::Array[Nextbillionai::RichGroupRequest::Turn]?

      def turns=: (
        ::Array[Nextbillionai::RichGroupRequest::Turn]
      ) -> ::Array[Nextbillionai::RichGroupRequest::Turn]

      attr_reader weight: Integer?

      def weight=: (Integer) -> Integer

      attr_reader width: Integer?

      def width=: (Integer) -> Integer

      def initialize: (
        area: String,
        name: String,
        ?comment: String,
        ?direction: Nextbillionai::Models::RichGroupRequest::direction,
        ?end_time: Float,
        ?geofence: ::Array[::Array[Float]],
        ?height: Integer,
        ?length: Integer,
        ?mode: ::Array[Nextbillionai::Models::RichGroupRequest::mode],
        ?repeat_on: String,
        ?segments: ::Array[Nextbillionai::RichGroupRequest::Segment],
        ?speed: Float,
        ?speed_limit: Float,
        ?start_time: Float,
        ?tracks: ::Array[::Array[Float]],
        ?turns: ::Array[Nextbillionai::RichGroupRequest::Turn],
        ?weight: Integer,
        ?width: Integer
      ) -> void

      def to_hash: -> {
        area: String,
        name: String,
        comment: String,
        direction: Nextbillionai::Models::RichGroupRequest::direction,
        end_time: Float,
        geofence: ::Array[::Array[Float]],
        height: Integer,
        length: Integer,
        mode: ::Array[Nextbillionai::Models::RichGroupRequest::mode],
        repeat_on: String,
        segments: ::Array[Nextbillionai::RichGroupRequest::Segment],
        speed: Float,
        speed_limit: Float,
        start_time: Float,
        tracks: ::Array[::Array[Float]],
        turns: ::Array[Nextbillionai::RichGroupRequest::Turn],
        weight: Integer,
        width: Integer
      }

      type direction = :forward | :backward | :both

      module Direction
        extend Nextbillionai::Internal::Type::Enum

        FORWARD: :forward
        BACKWARD: :backward
        BOTH: :both

        def self?.values: -> ::Array[Nextbillionai::Models::RichGroupRequest::direction]
      end

      type mode = :"0w" | :"2w" | :"3w" | :"4w" | :"6w"

      module Mode
        extend Nextbillionai::Internal::Type::Enum

        MODE_0W: :"0w"
        MODE_2W: :"2w"
        MODE_3W: :"3w"
        MODE_4W: :"4w"
        MODE_6W: :"6w"

        def self?.values: -> ::Array[Nextbillionai::Models::RichGroupRequest::mode]
      end

      type segment = { from: Float, to: Float }

      class Segment < Nextbillionai::Internal::Type::BaseModel
        attr_reader from: Float?

        def from=: (Float) -> Float

        attr_reader to: Float?

        def to=: (Float) -> Float

        def initialize: (?from: Float, ?to: Float) -> void

        def to_hash: -> { from: Float, to: Float }
      end

      type turn = { from: Integer, to: Integer, via: Integer }

      class Turn < Nextbillionai::Internal::Type::BaseModel
        attr_reader from: Integer?

        def from=: (Integer) -> Integer

        attr_reader to: Integer?

        def to=: (Integer) -> Integer

        attr_reader via: Integer?

        def via=: (Integer) -> Integer

        def initialize: (?from: Integer, ?to: Integer, ?via: Integer) -> void

        def to_hash: -> { from: Integer, to: Integer, via: Integer }
      end
    end
  end
end
