module Nextbillionai
  module Models
    type snap_to_road_snap_params =
      {
        key: String,
        path: String,
        approaches: Nextbillionai::Models::SnapToRoadSnapParams::approaches,
        avoid: Nextbillionai::Models::SnapToRoadSnapParams::avoid,
        geometry: Nextbillionai::Models::SnapToRoadSnapParams::geometry,
        mode: Nextbillionai::Models::SnapToRoadSnapParams::mode,
        option: Nextbillionai::Models::SnapToRoadSnapParams::option,
        radiuses: String,
        road_info: Nextbillionai::Models::SnapToRoadSnapParams::road_info,
        timestamps: String,
        tolerate_outlier: bool
      }
      & Nextbillionai::Internal::Type::request_parameters

    class SnapToRoadSnapParams < Nextbillionai::Internal::Type::BaseModel
      extend Nextbillionai::Internal::Type::RequestParameters::Converter
      include Nextbillionai::Internal::Type::RequestParameters

      attr_accessor key: String

      attr_accessor path: String

      attr_reader approaches: Nextbillionai::Models::SnapToRoadSnapParams::approaches?

      def approaches=: (
        Nextbillionai::Models::SnapToRoadSnapParams::approaches
      ) -> Nextbillionai::Models::SnapToRoadSnapParams::approaches

      attr_reader avoid: Nextbillionai::Models::SnapToRoadSnapParams::avoid?

      def avoid=: (
        Nextbillionai::Models::SnapToRoadSnapParams::avoid
      ) -> Nextbillionai::Models::SnapToRoadSnapParams::avoid

      attr_reader geometry: Nextbillionai::Models::SnapToRoadSnapParams::geometry?

      def geometry=: (
        Nextbillionai::Models::SnapToRoadSnapParams::geometry
      ) -> Nextbillionai::Models::SnapToRoadSnapParams::geometry

      attr_reader mode: Nextbillionai::Models::SnapToRoadSnapParams::mode?

      def mode=: (
        Nextbillionai::Models::SnapToRoadSnapParams::mode
      ) -> Nextbillionai::Models::SnapToRoadSnapParams::mode

      attr_reader option: Nextbillionai::Models::SnapToRoadSnapParams::option?

      def option=: (
        Nextbillionai::Models::SnapToRoadSnapParams::option
      ) -> Nextbillionai::Models::SnapToRoadSnapParams::option

      attr_reader radiuses: String?

      def radiuses=: (String) -> String

      attr_reader road_info: Nextbillionai::Models::SnapToRoadSnapParams::road_info?

      def road_info=: (
        Nextbillionai::Models::SnapToRoadSnapParams::road_info
      ) -> Nextbillionai::Models::SnapToRoadSnapParams::road_info

      attr_reader timestamps: String?

      def timestamps=: (String) -> String

      attr_reader tolerate_outlier: bool?

      def tolerate_outlier=: (bool) -> bool

      def initialize: (
        key: String,
        path: String,
        ?approaches: Nextbillionai::Models::SnapToRoadSnapParams::approaches,
        ?avoid: Nextbillionai::Models::SnapToRoadSnapParams::avoid,
        ?geometry: Nextbillionai::Models::SnapToRoadSnapParams::geometry,
        ?mode: Nextbillionai::Models::SnapToRoadSnapParams::mode,
        ?option: Nextbillionai::Models::SnapToRoadSnapParams::option,
        ?radiuses: String,
        ?road_info: Nextbillionai::Models::SnapToRoadSnapParams::road_info,
        ?timestamps: String,
        ?tolerate_outlier: bool,
        ?request_options: Nextbillionai::request_opts
      ) -> void

      def to_hash: -> {
        key: String,
        path: String,
        approaches: Nextbillionai::Models::SnapToRoadSnapParams::approaches,
        avoid: Nextbillionai::Models::SnapToRoadSnapParams::avoid,
        geometry: Nextbillionai::Models::SnapToRoadSnapParams::geometry,
        mode: Nextbillionai::Models::SnapToRoadSnapParams::mode,
        option: Nextbillionai::Models::SnapToRoadSnapParams::option,
        radiuses: String,
        road_info: Nextbillionai::Models::SnapToRoadSnapParams::road_info,
        timestamps: String,
        tolerate_outlier: bool,
        request_options: Nextbillionai::RequestOptions
      }

      type approaches = :"`unrestricted`" | :"`curb`"

      module Approaches
        extend Nextbillionai::Internal::Type::Enum

        UNRESTRICTED: :"`unrestricted`"
        CURB: :"`curb`"

        def self?.values: -> ::Array[Nextbillionai::Models::SnapToRoadSnapParams::approaches]
      end

      type avoid = :toll | :ferry | :highway | :none

      module Avoid
        extend Nextbillionai::Internal::Type::Enum

        TOLL: :toll
        FERRY: :ferry
        HIGHWAY: :highway
        NONE: :none

        def self?.values: -> ::Array[Nextbillionai::Models::SnapToRoadSnapParams::avoid]
      end

      type geometry = :"`polyline`" | :"`polyline6`" | :"`geojson`"

      module Geometry
        extend Nextbillionai::Internal::Type::Enum

        POLYLINE: :"`polyline`"
        POLYLINE6: :"`polyline6`"
        GEOJSON: :"`geojson`"

        def self?.values: -> ::Array[Nextbillionai::Models::SnapToRoadSnapParams::geometry]
      end

      type mode = :"`car`" | :"`truck`"

      module Mode
        extend Nextbillionai::Internal::Type::Enum

        CAR: :"`car`"
        TRUCK: :"`truck`"

        def self?.values: -> ::Array[Nextbillionai::Models::SnapToRoadSnapParams::mode]
      end

      type option = :"`flexible`"

      module Option
        extend Nextbillionai::Internal::Type::Enum

        FLEXIBLE: :"`flexible`"

        def self?.values: -> ::Array[Nextbillionai::Models::SnapToRoadSnapParams::option]
      end

      type road_info = :"`max_speed`"

      module RoadInfo
        extend Nextbillionai::Internal::Type::Enum

        MAX_SPEED: :"`max_speed`"

        def self?.values: -> ::Array[Nextbillionai::Models::SnapToRoadSnapParams::road_info]
      end
    end
  end
end
