module Nextbillionai
  module Models
    module Optimization
      type driver_assignment_assign_params =
        {
          key: String,
          filter: Nextbillionai::Optimization::DriverAssignmentAssignParams::Filter,
          orders: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order],
          vehicles: ::Array[Nextbillionai::Optimization::Vehicle],
          options: Nextbillionai::Optimization::DriverAssignmentAssignParams::Options
        }
        & Nextbillionai::Internal::Type::request_parameters

      class DriverAssignmentAssignParams < Nextbillionai::Internal::Type::BaseModel
        extend Nextbillionai::Internal::Type::RequestParameters::Converter
        include Nextbillionai::Internal::Type::RequestParameters

        attr_accessor key: String

        attr_accessor filter: Nextbillionai::Optimization::DriverAssignmentAssignParams::Filter

        attr_accessor orders: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order]

        attr_accessor vehicles: ::Array[Nextbillionai::Optimization::Vehicle]

        attr_reader options: Nextbillionai::Optimization::DriverAssignmentAssignParams::Options?

        def options=: (
          Nextbillionai::Optimization::DriverAssignmentAssignParams::Options
        ) -> Nextbillionai::Optimization::DriverAssignmentAssignParams::Options

        def initialize: (
          key: String,
          filter: Nextbillionai::Optimization::DriverAssignmentAssignParams::Filter,
          orders: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order],
          vehicles: ::Array[Nextbillionai::Optimization::Vehicle],
          ?options: Nextbillionai::Optimization::DriverAssignmentAssignParams::Options,
          ?request_options: Nextbillionai::request_opts
        ) -> void

        def to_hash: -> {
          key: String,
          filter: Nextbillionai::Optimization::DriverAssignmentAssignParams::Filter,
          orders: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order],
          vehicles: ::Array[Nextbillionai::Optimization::Vehicle],
          options: Nextbillionai::Optimization::DriverAssignmentAssignParams::Options,
          request_options: Nextbillionai::RequestOptions
        }

        type filter =
          { driving_distance: Float, pickup_eta: Integer, radius: Float }

        class Filter < Nextbillionai::Internal::Type::BaseModel
          attr_reader driving_distance: Float?

          def driving_distance=: (Float) -> Float

          attr_reader pickup_eta: Integer?

          def pickup_eta=: (Integer) -> Integer

          attr_reader radius: Float?

          def radius=: (Float) -> Float

          def initialize: (
            ?driving_distance: Float,
            ?pickup_eta: Integer,
            ?radius: Float
          ) -> void

          def to_hash: -> {
            driving_distance: Float,
            pickup_eta: Integer,
            radius: Float
          }
        end

        type order =
          {
            id: String,
            pickup: Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Pickup,
            attributes: top,
            dropoffs: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Dropoff],
            priority: Integer,
            service_time: Integer,
            vehicle_preferences: Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences
          }

        class Order < Nextbillionai::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor pickup: Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Pickup

          attr_reader attributes: top?

          def attributes=: (top) -> top

          attr_reader dropoffs: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Dropoff]?

          def dropoffs=: (
            ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Dropoff]
          ) -> ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Dropoff]

          attr_reader priority: Integer?

          def priority=: (Integer) -> Integer

          attr_reader service_time: Integer?

          def service_time=: (Integer) -> Integer

          attr_reader vehicle_preferences: Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences?

          def vehicle_preferences=: (
            Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences
          ) -> Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences

          def initialize: (
            id: String,
            pickup: Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Pickup,
            ?attributes: top,
            ?dropoffs: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Dropoff],
            ?priority: Integer,
            ?service_time: Integer,
            ?vehicle_preferences: Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences
          ) -> void

          def to_hash: -> {
            id: String,
            pickup: Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Pickup,
            attributes: top,
            dropoffs: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::Dropoff],
            priority: Integer,
            service_time: Integer,
            vehicle_preferences: Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences
          }

          type pickup = { lat: Float, lng: Float }

          class Pickup < Nextbillionai::Internal::Type::BaseModel
            attr_reader lat: Float?

            def lat=: (Float) -> Float

            attr_reader lng: Float?

            def lng=: (Float) -> Float

            def initialize: (?lat: Float, ?lng: Float) -> void

            def to_hash: -> { lat: Float, lng: Float }
          end

          type dropoff = { lat: Float, lng: Float }

          class Dropoff < Nextbillionai::Internal::Type::BaseModel
            attr_reader lat: Float?

            def lat=: (Float) -> Float

            attr_reader lng: Float?

            def lng=: (Float) -> Float

            def initialize: (?lat: Float, ?lng: Float) -> void

            def to_hash: -> { lat: Float, lng: Float }
          end

          type vehicle_preferences =
            {
              exclude_all_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::ExcludeAllOfAttribute],
              required_all_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAllOfAttribute],
              required_any_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAnyOfAttribute]
            }

          class VehiclePreferences < Nextbillionai::Internal::Type::BaseModel
            attr_reader exclude_all_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::ExcludeAllOfAttribute]?

            def exclude_all_of_attributes=: (
              ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::ExcludeAllOfAttribute]
            ) -> ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::ExcludeAllOfAttribute]

            attr_reader required_all_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAllOfAttribute]?

            def required_all_of_attributes=: (
              ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAllOfAttribute]
            ) -> ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAllOfAttribute]

            attr_reader required_any_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAnyOfAttribute]?

            def required_any_of_attributes=: (
              ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAnyOfAttribute]
            ) -> ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAnyOfAttribute]

            def initialize: (
              ?exclude_all_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::ExcludeAllOfAttribute],
              ?required_all_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAllOfAttribute],
              ?required_any_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAnyOfAttribute]
            ) -> void

            def to_hash: -> {
              exclude_all_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::ExcludeAllOfAttribute],
              required_all_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAllOfAttribute],
              required_any_of_attributes: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Order::VehiclePreferences::RequiredAnyOfAttribute]
            }

            type exclude_all_of_attribute =
              { attribute: String, operator: String, value: String }

            class ExcludeAllOfAttribute < Nextbillionai::Internal::Type::BaseModel
              attr_accessor attribute: String

              attr_accessor operator: String

              attr_accessor value: String

              def initialize: (
                attribute: String,
                operator: String,
                value: String
              ) -> void

              def to_hash: -> {
                attribute: String,
                operator: String,
                value: String
              }
            end

            type required_all_of_attribute =
              { attribute: String, operator: String, value: String }

            class RequiredAllOfAttribute < Nextbillionai::Internal::Type::BaseModel
              attr_accessor attribute: String

              attr_accessor operator: String

              attr_accessor value: String

              def initialize: (
                attribute: String,
                operator: String,
                value: String
              ) -> void

              def to_hash: -> {
                attribute: String,
                operator: String,
                value: String
              }
            end

            type required_any_of_attribute =
              { attribute: String, operator: String, value: String }

            class RequiredAnyOfAttribute < Nextbillionai::Internal::Type::BaseModel
              attr_accessor attribute: String

              attr_accessor operator: String

              attr_accessor value: String

              def initialize: (
                attribute: String,
                operator: String,
                value: String
              ) -> void

              def to_hash: -> {
                attribute: String,
                operator: String,
                value: String
              }
            end
          end
        end

        type options =
          {
            alternate_assignments: Integer,
            dropoff_details: bool,
            order_attribute_priority_mappings: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::OrderAttributePriorityMapping],
            travel_cost: Nextbillionai::Models::Optimization::DriverAssignmentAssignParams::Options::travel_cost,
            vehicle_attribute_priority_mappings: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::VehicleAttributePriorityMapping]
          }

        class Options < Nextbillionai::Internal::Type::BaseModel
          attr_reader alternate_assignments: Integer?

          def alternate_assignments=: (Integer) -> Integer

          attr_reader dropoff_details: bool?

          def dropoff_details=: (bool) -> bool

          attr_reader order_attribute_priority_mappings: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::OrderAttributePriorityMapping]?

          def order_attribute_priority_mappings=: (
            ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::OrderAttributePriorityMapping]
          ) -> ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::OrderAttributePriorityMapping]

          attr_reader travel_cost: Nextbillionai::Models::Optimization::DriverAssignmentAssignParams::Options::travel_cost?

          def travel_cost=: (
            Nextbillionai::Models::Optimization::DriverAssignmentAssignParams::Options::travel_cost
          ) -> Nextbillionai::Models::Optimization::DriverAssignmentAssignParams::Options::travel_cost

          attr_reader vehicle_attribute_priority_mappings: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::VehicleAttributePriorityMapping]?

          def vehicle_attribute_priority_mappings=: (
            ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::VehicleAttributePriorityMapping]
          ) -> ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::VehicleAttributePriorityMapping]

          def initialize: (
            ?alternate_assignments: Integer,
            ?dropoff_details: bool,
            ?order_attribute_priority_mappings: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::OrderAttributePriorityMapping],
            ?travel_cost: Nextbillionai::Models::Optimization::DriverAssignmentAssignParams::Options::travel_cost,
            ?vehicle_attribute_priority_mappings: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::VehicleAttributePriorityMapping]
          ) -> void

          def to_hash: -> {
            alternate_assignments: Integer,
            dropoff_details: bool,
            order_attribute_priority_mappings: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::OrderAttributePriorityMapping],
            travel_cost: Nextbillionai::Models::Optimization::DriverAssignmentAssignParams::Options::travel_cost,
            vehicle_attribute_priority_mappings: ::Array[Nextbillionai::Optimization::DriverAssignmentAssignParams::Options::VehicleAttributePriorityMapping]
          }

          type order_attribute_priority_mapping =
            {
              attribute: String,
              operator: String,
              priority: String,
              value: String
            }

          class OrderAttributePriorityMapping < Nextbillionai::Internal::Type::BaseModel
            attr_accessor attribute: String

            attr_accessor operator: String

            attr_accessor priority: String

            attr_accessor value: String

            def initialize: (
              attribute: String,
              operator: String,
              priority: String,
              value: String
            ) -> void

            def to_hash: -> {
              attribute: String,
              operator: String,
              priority: String,
              value: String
            }
          end

          type travel_cost =
            :driving_eta | :driving_distance | :straight_line_distance

          module TravelCost
            extend Nextbillionai::Internal::Type::Enum

            DRIVING_ETA: :driving_eta
            DRIVING_DISTANCE: :driving_distance
            STRAIGHT_LINE_DISTANCE: :straight_line_distance

            def self?.values: -> ::Array[Nextbillionai::Models::Optimization::DriverAssignmentAssignParams::Options::travel_cost]
          end

          type vehicle_attribute_priority_mapping =
            {
              attribute: String,
              operator: String,
              priority: String,
              value: String
            }

          class VehicleAttributePriorityMapping < Nextbillionai::Internal::Type::BaseModel
            attr_accessor attribute: String

            attr_accessor operator: String

            attr_accessor priority: String

            attr_accessor value: String

            def initialize: (
              attribute: String,
              operator: String,
              priority: String,
              value: String
            ) -> void

            def to_hash: -> {
              attribute: String,
              operator: String,
              priority: String,
              value: String
            }
          end
        end
      end
    end
  end
end
