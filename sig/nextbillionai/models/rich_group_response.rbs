module Nextbillionai
  module Models
    type rich_group_response =
      {
        id: Integer,
        area: String,
        bbox: top,
        comment: String,
        create_at: Time,
        direction: Nextbillionai::Models::RichGroupResponse::direction,
        end_time: Float,
        geofence: top,
        highway: String,
        mode: ::Array[String],
        name: String,
        repeat_on: String,
        restriction_type: Nextbillionai::Models::RichGroupResponse::restriction_type,
        speed: Float,
        speed_limit: Float,
        start_time: Float,
        state: Nextbillionai::Models::RichGroupResponse::state,
        status: Nextbillionai::Models::RichGroupResponse::status,
        update_at: Time
      }

    class RichGroupResponse < Nextbillionai::Internal::Type::BaseModel
      attr_reader id: Integer?

      def id=: (Integer) -> Integer

      attr_reader area: String?

      def area=: (String) -> String

      attr_reader bbox: top?

      def bbox=: (top) -> top

      attr_reader comment: String?

      def comment=: (String) -> String

      attr_reader create_at: Time?

      def create_at=: (Time) -> Time

      attr_reader direction: Nextbillionai::Models::RichGroupResponse::direction?

      def direction=: (
        Nextbillionai::Models::RichGroupResponse::direction
      ) -> Nextbillionai::Models::RichGroupResponse::direction

      attr_reader end_time: Float?

      def end_time=: (Float) -> Float

      attr_reader geofence: top?

      def geofence=: (top) -> top

      attr_reader highway: String?

      def highway=: (String) -> String

      attr_reader mode: ::Array[String]?

      def mode=: (::Array[String]) -> ::Array[String]

      attr_reader name: String?

      def name=: (String) -> String

      attr_reader repeat_on: String?

      def repeat_on=: (String) -> String

      attr_reader restriction_type: Nextbillionai::Models::RichGroupResponse::restriction_type?

      def restriction_type=: (
        Nextbillionai::Models::RichGroupResponse::restriction_type
      ) -> Nextbillionai::Models::RichGroupResponse::restriction_type

      attr_reader speed: Float?

      def speed=: (Float) -> Float

      attr_reader speed_limit: Float?

      def speed_limit=: (Float) -> Float

      attr_reader start_time: Float?

      def start_time=: (Float) -> Float

      attr_reader state: Nextbillionai::Models::RichGroupResponse::state?

      def state=: (
        Nextbillionai::Models::RichGroupResponse::state
      ) -> Nextbillionai::Models::RichGroupResponse::state

      attr_reader status: Nextbillionai::Models::RichGroupResponse::status?

      def status=: (
        Nextbillionai::Models::RichGroupResponse::status
      ) -> Nextbillionai::Models::RichGroupResponse::status

      attr_reader update_at: Time?

      def update_at=: (Time) -> Time

      def initialize: (
        ?id: Integer,
        ?area: String,
        ?bbox: top,
        ?comment: String,
        ?create_at: Time,
        ?direction: Nextbillionai::Models::RichGroupResponse::direction,
        ?end_time: Float,
        ?geofence: top,
        ?highway: String,
        ?mode: ::Array[String],
        ?name: String,
        ?repeat_on: String,
        ?restriction_type: Nextbillionai::Models::RichGroupResponse::restriction_type,
        ?speed: Float,
        ?speed_limit: Float,
        ?start_time: Float,
        ?state: Nextbillionai::Models::RichGroupResponse::state,
        ?status: Nextbillionai::Models::RichGroupResponse::status,
        ?update_at: Time
      ) -> void

      def to_hash: -> {
        id: Integer,
        area: String,
        bbox: top,
        comment: String,
        create_at: Time,
        direction: Nextbillionai::Models::RichGroupResponse::direction,
        end_time: Float,
        geofence: top,
        highway: String,
        mode: ::Array[String],
        name: String,
        repeat_on: String,
        restriction_type: Nextbillionai::Models::RichGroupResponse::restriction_type,
        speed: Float,
        speed_limit: Float,
        start_time: Float,
        state: Nextbillionai::Models::RichGroupResponse::state,
        status: Nextbillionai::Models::RichGroupResponse::status,
        update_at: Time
      }

      type direction = :forward | :backward | :both

      module Direction
        extend Nextbillionai::Internal::Type::Enum

        FORWARD: :forward
        BACKWARD: :backward
        BOTH: :both

        def self?.values: -> ::Array[Nextbillionai::Models::RichGroupResponse::direction]
      end

      type restriction_type =
        :closure | :maxspeed | :fixedspeed | :parking | :turn | :truck

      module RestrictionType
        extend Nextbillionai::Internal::Type::Enum

        CLOSURE: :closure
        MAXSPEED: :maxspeed
        FIXEDSPEED: :fixedspeed
        PARKING: :parking
        TURN: :turn
        TRUCK: :truck

        def self?.values: -> ::Array[Nextbillionai::Models::RichGroupResponse::restriction_type]
      end

      type state = :enabled | :disabled | :deleted

      module State
        extend Nextbillionai::Internal::Type::Enum

        ENABLED: :enabled
        DISABLED: :disabled
        DELETED: :deleted

        def self?.values: -> ::Array[Nextbillionai::Models::RichGroupResponse::state]
      end

      type status = :active | :inactive

      module Status
        extend Nextbillionai::Internal::Type::Enum

        ACTIVE: :active
        INACTIVE: :inactive

        def self?.values: -> ::Array[Nextbillionai::Models::RichGroupResponse::status]
      end
    end
  end
end
