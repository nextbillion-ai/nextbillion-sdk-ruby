module Nextbillionai
  module Models
    module Skynet
      module Asset
        type event_list_response =
          {
            data: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data,
            message: String,
            status: String
          }

        class EventListResponse < Nextbillionai::Internal::Type::BaseModel
          attr_reader data: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data?

          def data=: (
            Nextbillionai::Models::Skynet::Asset::EventListResponse::Data
          ) -> Nextbillionai::Models::Skynet::Asset::EventListResponse::Data

          attr_reader message: String?

          def message=: (String) -> String

          attr_reader status: String?

          def status=: (String) -> String

          def initialize: (
            ?data: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data,
            ?message: String,
            ?status: String
          ) -> void

          def to_hash: -> {
            data: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data,
            message: String,
            status: String
          }

          type data =
            {
              list: ::Array[Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List],
              page: Nextbillionai::Skynet::Pagination
            }

          class Data < Nextbillionai::Internal::Type::BaseModel
            attr_reader list: ::Array[Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List]?

            def list=: (
              ::Array[Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List]
            ) -> ::Array[Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List]

            attr_reader page: Nextbillionai::Skynet::Pagination?

            def page=: (
              Nextbillionai::Skynet::Pagination
            ) -> Nextbillionai::Skynet::Pagination

            def initialize: (
              ?list: ::Array[Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List],
              ?page: Nextbillionai::Skynet::Pagination
            ) -> void

            def to_hash: -> {
              list: ::Array[Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List],
              page: Nextbillionai::Skynet::Pagination
            }

            type list =
              {
                asset_id: String,
                event_type: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::event_type,
                extra: top,
                geofence_id: String,
                monitor_id: String,
                monitor_tags: ::Array[String],
                prev_location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation,
                timestamp: Integer,
                triggered_location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation,
                triggered_timestamp: Integer
              }

            class List < Nextbillionai::Internal::Type::BaseModel
              attr_reader asset_id: String?

              def asset_id=: (String) -> String

              attr_reader event_type: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::event_type?

              def event_type=: (
                Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::event_type
              ) -> Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::event_type

              attr_reader extra: top?

              def extra=: (top) -> top

              attr_reader geofence_id: String?

              def geofence_id=: (String) -> String

              attr_reader monitor_id: String?

              def monitor_id=: (String) -> String

              attr_reader monitor_tags: ::Array[String]?

              def monitor_tags=: (::Array[String]) -> ::Array[String]

              attr_reader prev_location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation?

              def prev_location=: (
                Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation
              ) -> Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation

              attr_reader timestamp: Integer?

              def timestamp=: (Integer) -> Integer

              attr_reader triggered_location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation?

              def triggered_location=: (
                Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation
              ) -> Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation

              attr_reader triggered_timestamp: Integer?

              def triggered_timestamp=: (Integer) -> Integer

              def initialize: (
                ?asset_id: String,
                ?event_type: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::event_type,
                ?extra: top,
                ?geofence_id: String,
                ?monitor_id: String,
                ?monitor_tags: ::Array[String],
                ?prev_location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation,
                ?timestamp: Integer,
                ?triggered_location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation,
                ?triggered_timestamp: Integer
              ) -> void

              def to_hash: -> {
                asset_id: String,
                event_type: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::event_type,
                extra: top,
                geofence_id: String,
                monitor_id: String,
                monitor_tags: ::Array[String],
                prev_location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation,
                timestamp: Integer,
                triggered_location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation,
                triggered_timestamp: Integer
              }

              type event_type =
                :"`enter`" | :"`exit`" | :"`speeding`" | :"`idle`"

              module EventType
                extend Nextbillionai::Internal::Type::Enum

                ENTER: :"`enter`"
                EXIT: :"`exit`"
                SPEEDING: :"`speeding`"
                IDLE: :"`idle`"

                def self?.values: -> ::Array[Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::event_type]
              end

              type prev_location =
                {
                  bearing: Float,
                  location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation::Location,
                  meta_data: top,
                  speed: Float,
                  timestamp: Integer
                }

              class PrevLocation < Nextbillionai::Internal::Type::BaseModel
                attr_reader bearing: Float?

                def bearing=: (Float) -> Float

                attr_reader location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation::Location?

                def location=: (
                  Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation::Location
                ) -> Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation::Location

                attr_reader meta_data: top?

                def meta_data=: (top) -> top

                attr_reader speed: Float?

                def speed=: (Float) -> Float

                attr_reader timestamp: Integer?

                def timestamp=: (Integer) -> Integer

                def initialize: (
                  ?bearing: Float,
                  ?location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation::Location,
                  ?meta_data: top,
                  ?speed: Float,
                  ?timestamp: Integer
                ) -> void

                def to_hash: -> {
                  bearing: Float,
                  location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::PrevLocation::Location,
                  meta_data: top,
                  speed: Float,
                  timestamp: Integer
                }

                type location = { lat: Float, lon: Float }

                class Location < Nextbillionai::Internal::Type::BaseModel
                  attr_reader lat: Float?

                  def lat=: (Float) -> Float

                  attr_reader lon: Float?

                  def lon=: (Float) -> Float

                  def initialize: (?lat: Float, ?lon: Float) -> void

                  def to_hash: -> { lat: Float, lon: Float }
                end
              end

              type triggered_location =
                {
                  bearing: Float,
                  location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation::Location,
                  meta_data: top,
                  speed: Float,
                  timestamp: Integer
                }

              class TriggeredLocation < Nextbillionai::Internal::Type::BaseModel
                attr_reader bearing: Float?

                def bearing=: (Float) -> Float

                attr_reader location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation::Location?

                def location=: (
                  Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation::Location
                ) -> Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation::Location

                attr_reader meta_data: top?

                def meta_data=: (top) -> top

                attr_reader speed: Float?

                def speed=: (Float) -> Float

                attr_reader timestamp: Integer?

                def timestamp=: (Integer) -> Integer

                def initialize: (
                  ?bearing: Float,
                  ?location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation::Location,
                  ?meta_data: top,
                  ?speed: Float,
                  ?timestamp: Integer
                ) -> void

                def to_hash: -> {
                  bearing: Float,
                  location: Nextbillionai::Models::Skynet::Asset::EventListResponse::Data::List::TriggeredLocation::Location,
                  meta_data: top,
                  speed: Float,
                  timestamp: Integer
                }

                type location = { lat: Float, lon: Float }

                class Location < Nextbillionai::Internal::Type::BaseModel
                  attr_reader lat: Float?

                  def lat=: (Float) -> Float

                  attr_reader lon: Float?

                  def lon=: (Float) -> Float

                  def initialize: (?lat: Float, ?lon: Float) -> void

                  def to_hash: -> { lat: Float, lon: Float }
                end
              end
            end
          end
        end
      end
    end
  end
end
