module Nextbillionai
  module Models
    module Skynet
      type monitor_create_params =
        {
          key: String,
          tags: ::Array[String],
          type: Nextbillionai::Models::Skynet::MonitorCreateParams::type_,
          cluster: Nextbillionai::Models::Skynet::MonitorCreateParams::cluster,
          custom_id: String,
          description: String,
          geofence_config: Nextbillionai::Skynet::MonitorCreateParams::GeofenceConfig,
          geofence_ids: ::Array[String],
          idle_config: Nextbillionai::Skynet::MonitorCreateParams::IdleConfig,
          match_filter: Nextbillionai::Skynet::MonitorCreateParams::MatchFilter,
          meta_data: top,
          name: String,
          speeding_config: Nextbillionai::Skynet::MonitorCreateParams::SpeedingConfig
        }
        & Nextbillionai::Internal::Type::request_parameters

      class MonitorCreateParams < Nextbillionai::Internal::Type::BaseModel
        extend Nextbillionai::Internal::Type::RequestParameters::Converter
        include Nextbillionai::Internal::Type::RequestParameters

        attr_accessor key: String

        attr_accessor tags: ::Array[String]

        attr_accessor type: Nextbillionai::Models::Skynet::MonitorCreateParams::type_

        attr_reader cluster: Nextbillionai::Models::Skynet::MonitorCreateParams::cluster?

        def cluster=: (
          Nextbillionai::Models::Skynet::MonitorCreateParams::cluster
        ) -> Nextbillionai::Models::Skynet::MonitorCreateParams::cluster

        attr_reader custom_id: String?

        def custom_id=: (String) -> String

        attr_reader description: String?

        def description=: (String) -> String

        attr_reader geofence_config: Nextbillionai::Skynet::MonitorCreateParams::GeofenceConfig?

        def geofence_config=: (
          Nextbillionai::Skynet::MonitorCreateParams::GeofenceConfig
        ) -> Nextbillionai::Skynet::MonitorCreateParams::GeofenceConfig

        attr_reader geofence_ids: ::Array[String]?

        def geofence_ids=: (::Array[String]) -> ::Array[String]

        attr_reader idle_config: Nextbillionai::Skynet::MonitorCreateParams::IdleConfig?

        def idle_config=: (
          Nextbillionai::Skynet::MonitorCreateParams::IdleConfig
        ) -> Nextbillionai::Skynet::MonitorCreateParams::IdleConfig

        attr_reader match_filter: Nextbillionai::Skynet::MonitorCreateParams::MatchFilter?

        def match_filter=: (
          Nextbillionai::Skynet::MonitorCreateParams::MatchFilter
        ) -> Nextbillionai::Skynet::MonitorCreateParams::MatchFilter

        attr_reader meta_data: top?

        def meta_data=: (top) -> top

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader speeding_config: Nextbillionai::Skynet::MonitorCreateParams::SpeedingConfig?

        def speeding_config=: (
          Nextbillionai::Skynet::MonitorCreateParams::SpeedingConfig
        ) -> Nextbillionai::Skynet::MonitorCreateParams::SpeedingConfig

        def initialize: (
          key: String,
          tags: ::Array[String],
          type: Nextbillionai::Models::Skynet::MonitorCreateParams::type_,
          ?cluster: Nextbillionai::Models::Skynet::MonitorCreateParams::cluster,
          ?custom_id: String,
          ?description: String,
          ?geofence_config: Nextbillionai::Skynet::MonitorCreateParams::GeofenceConfig,
          ?geofence_ids: ::Array[String],
          ?idle_config: Nextbillionai::Skynet::MonitorCreateParams::IdleConfig,
          ?match_filter: Nextbillionai::Skynet::MonitorCreateParams::MatchFilter,
          ?meta_data: top,
          ?name: String,
          ?speeding_config: Nextbillionai::Skynet::MonitorCreateParams::SpeedingConfig,
          ?request_options: Nextbillionai::request_opts
        ) -> void

        def to_hash: -> {
          key: String,
          tags: ::Array[String],
          type: Nextbillionai::Models::Skynet::MonitorCreateParams::type_,
          cluster: Nextbillionai::Models::Skynet::MonitorCreateParams::cluster,
          custom_id: String,
          description: String,
          geofence_config: Nextbillionai::Skynet::MonitorCreateParams::GeofenceConfig,
          geofence_ids: ::Array[String],
          idle_config: Nextbillionai::Skynet::MonitorCreateParams::IdleConfig,
          match_filter: Nextbillionai::Skynet::MonitorCreateParams::MatchFilter,
          meta_data: top,
          name: String,
          speeding_config: Nextbillionai::Skynet::MonitorCreateParams::SpeedingConfig,
          request_options: Nextbillionai::RequestOptions
        }

        type type_ =
          :"`enter`"
          | :"`exit`"
          | :"`enter_and_exit`"
          | :"`speeding`"
          | :"`idle`"

        module Type
          extend Nextbillionai::Internal::Type::Enum

          ENTER: :"`enter`"
          EXIT: :"`exit`"
          ENTER_AND_EXIT: :"`enter_and_exit`"
          SPEEDING: :"`speeding`"
          IDLE: :"`idle`"

          def self?.values: -> ::Array[Nextbillionai::Models::Skynet::MonitorCreateParams::type_]
        end

        type cluster = :america

        module Cluster
          extend Nextbillionai::Internal::Type::Enum

          AMERICA: :america

          def self?.values: -> ::Array[Nextbillionai::Models::Skynet::MonitorCreateParams::cluster]
        end

        type geofence_config = { geofence_ids: ::Array[String] }

        class GeofenceConfig < Nextbillionai::Internal::Type::BaseModel
          attr_accessor geofence_ids: ::Array[String]

          def initialize: (geofence_ids: ::Array[String]) -> void

          def to_hash: -> { geofence_ids: ::Array[String] }
        end

        type idle_config =
          { distance_tolerance: Float, time_tolerance: Integer }

        class IdleConfig < Nextbillionai::Internal::Type::BaseModel
          attr_accessor distance_tolerance: Float

          attr_reader time_tolerance: Integer?

          def time_tolerance=: (Integer) -> Integer

          def initialize: (
            distance_tolerance: Float,
            ?time_tolerance: Integer
          ) -> void

          def to_hash: -> { distance_tolerance: Float, time_tolerance: Integer }
        end

        type match_filter =
          { include_all_of_attributes: top, include_any_of_attributes: top }

        class MatchFilter < Nextbillionai::Internal::Type::BaseModel
          attr_reader include_all_of_attributes: top?

          def include_all_of_attributes=: (top) -> top

          attr_reader include_any_of_attributes: top?

          def include_any_of_attributes=: (top) -> top

          def initialize: (
            ?include_all_of_attributes: top,
            ?include_any_of_attributes: top
          ) -> void

          def to_hash: -> {
            include_all_of_attributes: top,
            include_any_of_attributes: top
          }
        end

        type speeding_config =
          {
            customer_speed_limit: Integer,
            time_tolerance: Integer,
            use_admin_speed_limit: bool
          }

        class SpeedingConfig < Nextbillionai::Internal::Type::BaseModel
          attr_reader customer_speed_limit: Integer?

          def customer_speed_limit=: (Integer) -> Integer

          attr_reader time_tolerance: Integer?

          def time_tolerance=: (Integer) -> Integer

          attr_reader use_admin_speed_limit: bool?

          def use_admin_speed_limit=: (bool) -> bool

          def initialize: (
            ?customer_speed_limit: Integer,
            ?time_tolerance: Integer,
            ?use_admin_speed_limit: bool
          ) -> void

          def to_hash: -> {
            customer_speed_limit: Integer,
            time_tolerance: Integer,
            use_admin_speed_limit: bool
          }
        end
      end
    end
  end
end
