module Nextbillionai
  module Models
    module Fleetify
      type document_template_content_response =
        {
          label: String,
          meta: Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta,
          name: String,
          required: bool,
          type: String,
          validation: Nextbillionai::Fleetify::DocumentTemplateContentResponse::Validation
        }

      class DocumentTemplateContentResponse < Nextbillionai::Internal::Type::BaseModel
        attr_reader label: String?

        def label=: (String) -> String

        attr_reader meta: Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta?

        def meta=: (
          Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta
        ) -> Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader required: bool?

        def required=: (bool) -> bool

        attr_reader type: String?

        def type=: (String) -> String

        attr_reader validation: Nextbillionai::Fleetify::DocumentTemplateContentResponse::Validation?

        def validation=: (
          Nextbillionai::Fleetify::DocumentTemplateContentResponse::Validation
        ) -> Nextbillionai::Fleetify::DocumentTemplateContentResponse::Validation

        def initialize: (
          ?label: String,
          ?meta: Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta,
          ?name: String,
          ?required: bool,
          ?type: String,
          ?validation: Nextbillionai::Fleetify::DocumentTemplateContentResponse::Validation
        ) -> void

        def to_hash: -> {
          label: String,
          meta: Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta,
          name: String,
          required: bool,
          type: String,
          validation: Nextbillionai::Fleetify::DocumentTemplateContentResponse::Validation
        }

        type meta =
          {
            options: ::Array[Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta::Option]
          }

        class Meta < Nextbillionai::Internal::Type::BaseModel
          attr_reader options: ::Array[Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta::Option]?

          def options=: (
            ::Array[Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta::Option]
          ) -> ::Array[Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta::Option]

          def initialize: (
            ?options: ::Array[Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta::Option]
          ) -> void

          def to_hash: -> {
            options: ::Array[Nextbillionai::Fleetify::DocumentTemplateContentResponse::Meta::Option]
          }

          type option = { label: String, value: String }

          class Option < Nextbillionai::Internal::Type::BaseModel
            attr_reader label: String?

            def label=: (String) -> String

            attr_reader value: String?

            def value=: (String) -> String

            def initialize: (?label: String, ?value: String) -> void

            def to_hash: -> { label: String, value: String }
          end
        end

        type validation =
          { max: Integer, max_items: String, min: Integer, min_items: String }

        class Validation < Nextbillionai::Internal::Type::BaseModel
          attr_reader max: Integer?

          def max=: (Integer) -> Integer

          attr_reader max_items: String?

          def max_items=: (String) -> String

          attr_reader min: Integer?

          def min=: (Integer) -> Integer

          attr_reader min_items: String?

          def min_items=: (String) -> String

          def initialize: (
            ?max: Integer,
            ?max_items: String,
            ?min: Integer,
            ?min_items: String
          ) -> void

          def to_hash: -> {
            max: Integer,
            max_items: String,
            min: Integer,
            min_items: String
          }
        end
      end
    end
  end
end
