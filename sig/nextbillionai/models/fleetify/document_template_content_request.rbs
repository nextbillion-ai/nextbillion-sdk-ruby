module Nextbillionai
  module Models
    module Fleetify
      type document_template_content_request =
        {
          label: String,
          type: Nextbillionai::Models::Fleetify::DocumentTemplateContentRequest::type_,
          meta: Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta,
          name: String,
          required: bool,
          validation: Nextbillionai::Fleetify::DocumentTemplateContentRequest::Validation
        }

      class DocumentTemplateContentRequest < Nextbillionai::Internal::Type::BaseModel
        attr_accessor label: String

        attr_accessor type: Nextbillionai::Models::Fleetify::DocumentTemplateContentRequest::type_

        attr_reader meta: Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta?

        def meta=: (
          Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta
        ) -> Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader required: bool?

        def required=: (bool) -> bool

        attr_reader validation: Nextbillionai::Fleetify::DocumentTemplateContentRequest::Validation?

        def validation=: (
          Nextbillionai::Fleetify::DocumentTemplateContentRequest::Validation
        ) -> Nextbillionai::Fleetify::DocumentTemplateContentRequest::Validation

        def initialize: (
          label: String,
          type: Nextbillionai::Models::Fleetify::DocumentTemplateContentRequest::type_,
          ?meta: Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta,
          ?name: String,
          ?required: bool,
          ?validation: Nextbillionai::Fleetify::DocumentTemplateContentRequest::Validation
        ) -> void

        def to_hash: -> {
          label: String,
          type: Nextbillionai::Models::Fleetify::DocumentTemplateContentRequest::type_,
          meta: Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta,
          name: String,
          required: bool,
          validation: Nextbillionai::Fleetify::DocumentTemplateContentRequest::Validation
        }

        type type_ =
          :"`string`"
          | :"`number`"
          | :"`date_time`"
          | :"`photos`"
          | :"`multi_choices`"
          | :"`signature`"
          | :"`barcode`"
          | :"`single_choice`"

        module Type
          extend Nextbillionai::Internal::Type::Enum

          STRING: :"`string`"
          NUMBER: :"`number`"
          DATE_TIME: :"`date_time`"
          PHOTOS: :"`photos`"
          MULTI_CHOICES: :"`multi_choices`"
          SIGNATURE: :"`signature`"
          BARCODE: :"`barcode`"
          SINGLE_CHOICE: :"`single_choice`"

          def self?.values: -> ::Array[Nextbillionai::Models::Fleetify::DocumentTemplateContentRequest::type_]
        end

        type meta =
          {
            options: ::Array[Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta::Option]
          }

        class Meta < Nextbillionai::Internal::Type::BaseModel
          attr_accessor options: ::Array[Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta::Option]

          def initialize: (
            options: ::Array[Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta::Option]
          ) -> void

          def to_hash: -> {
            options: ::Array[Nextbillionai::Fleetify::DocumentTemplateContentRequest::Meta::Option]
          }

          type option = { label: String, value: String }

          class Option < Nextbillionai::Internal::Type::BaseModel
            attr_accessor label: String

            attr_accessor value: String

            def initialize: (label: String, value: String) -> void

            def to_hash: -> { label: String, value: String }
          end
        end

        type validation =
          { max: Integer, max_items: Integer, min: Integer, min_items: Integer }

        class Validation < Nextbillionai::Internal::Type::BaseModel
          attr_reader max: Integer?

          def max=: (Integer) -> Integer

          attr_reader max_items: Integer?

          def max_items=: (Integer) -> Integer

          attr_reader min: Integer?

          def min=: (Integer) -> Integer

          attr_reader min_items: Integer?

          def min_items=: (Integer) -> Integer

          def initialize: (
            ?max: Integer,
            ?max_items: Integer,
            ?min: Integer,
            ?min_items: Integer
          ) -> void

          def to_hash: -> {
            max: Integer,
            max_items: Integer,
            min: Integer,
            min_items: Integer
          }
        end
      end
    end
  end
end
