# typed: strong

module NextbillionSDK
  module Resources
    class Fleetify
      class Routes
        sig { returns(NextbillionSDK::Resources::Fleetify::Routes::Steps) }
        attr_reader :steps

        # Dispatch a new route
        sig do
          params(
            key: String,
            driver_email: String,
            steps:
              T::Array[
                NextbillionSDK::Fleetify::Routes::RouteStepsRequest::OrHash
              ],
            distance: Integer,
            document_template_id: String,
            ro_request_id: String,
            routing:
              NextbillionSDK::Fleetify::RouteCreateParams::Routing::OrHash,
            request_options: NextbillionSDK::RequestOptions::OrHash
          ).returns(NextbillionSDK::Models::Fleetify::RouteCreateResponse)
        end
        def create(
          # Query param: A key is a unique identifier that is required to authenticate a
          # request to the API.
          key:,
          # Body param: Specify the e-mail address of the driver who should receive the
          # route. The e-mail address must be registered in
          # [NextBillion.ai Cloud Console](https://console.nextbillion.ai/).
          driver_email:,
          # Body param: An array of objects to collect the details about the intermediate
          # steps in the route to be dispatched. Each object corresponds to a single step.
          # The array must begin with a start-type step and end with an end-type step, to
          # form a valid route.
          steps:,
          # Body param: Specify the total distance, in meters, for an informative display in
          # Driver's app. The distance specified here has no effect on the actual route that
          # the service generates.
          distance: nil,
          # Body param: Specify the ID of the document template that should be used to
          # collect proof of completion for all steps in the route. In order to complete
          # each route step, the driver will need to submit a form generated by the rules
          # defined in the given document template. Use the
          # [Documents API](https://docs.nextbillion.ai/docs/dispatches/documents-api) to
          # create, read and manage document templates.
          #
          # Please note that the document template ID assigned to a route does not apply to
          # following step types - `start`, `end`, `break`, `layover`.
          document_template_id: nil,
          # Body param: Specify the Route Optimization request ID. When this ID is provided,
          # all other fields will be ignored (including the required fields) and the route
          # optimization result will be used to form the routes and corresponding steps.
          #
          # Please note that:
          #
          # - The driver's email ID must be provided in input `vehicle.metadata` as
          #   `user_email` such that the route optimization result must contain a valid
          #   driver email, step's arrival time, etc., to make a successful dispatch.
          # - Document Template for collecting proof of delivery or completion can not be
          #   specified when using this field to dispatch a route.
          # - In case of an error at any part among the routes, the API will immediately
          #   return the error with the index of the specific route or route step.
          # - On a successful dispatch, the API returns the last route, if there are many,
          #   in the response payload.
          ro_request_id: nil,
          # Body param: The `routing` object allows defining the routing characteristics
          # that should be used to generate a route when the Driver uses the in-app
          # navigation. Only `car` mode is supported currently.
          routing: nil,
          request_options: {}
        )
        end

        # Re-dispatch route
        sig do
          params(
            route_id: String,
            key: String,
            operations:
              T::Array[
                NextbillionSDK::Fleetify::RouteRedispatchParams::Operation::OrHash
              ],
            distance: Float,
            request_options: NextbillionSDK::RequestOptions::OrHash
          ).returns(NextbillionSDK::Models::Fleetify::RouteRedispatchResponse)
        end
        def redispatch(
          # Path param: Provide the ID of a previously dispatched route which needs to be
          # modified. Both the `id` and `short_id` of the route are a valid input.
          route_id,
          # Query param: A key is a unique identifier that is required to authenticate a
          # request to the API.
          key:,
          # Body param: A collection of objects with details of the steps to be modified.
          # Each object corresponds to a single step.
          operations:,
          # Body param: Specify the distance of the route.
          distance: nil,
          request_options: {}
        )
        end

        # @api private
        sig { params(client: NextbillionSDK::Client).returns(T.attached_class) }
        def self.new(client:)
        end
      end
    end
  end
end
